using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FreecraftCore.Serializer;

namespace Booma
{
	/// <summary>
	/// Packet sent to the client telling it to join a lobby.
	/// </summary>
	[WireDataContract]
	[CustomTypeSerializer(typeof(CustomBlockLobbyJoinEventPayloadSerializer))]
	[GameServerPacketPayload(GameNetworkOperationCode.LOBBY_JOIN_TYPE)]
	public sealed partial class BlockLobbyJoinEventPayload : PSOBBGamePacketPayloadServer
	{
		/// <summary>
		/// Flags for this packet contains the count of players in the lobby.
		/// </summary>
		public override bool isFlagsSerialized { get; } = false;

		/// <summary>
		/// Represents how many players are in the lobby.
		/// (Flags 4 byte chunk) read because <see cref="isFlagsSerialized"/> is false.
		/// </summary>
		[WireMember(1)]
		public int PlayerCount { get; internal set; }

		//TODO: We can't currently handle this packet. It does something odd the serializer can't handle
		/// <summary>
		/// The ID granted to the client that is joining the lobby.
		/// 0x08
		/// </summary>
		[WireMember(2)]
		public byte ClientId { get; internal set; }

		//TODO: What is this?
		/// <summary>
		/// 0x09
		/// </summary>
		[WireMember(3)]
		public byte LeaderId { get; internal set; }

		//Why is this in some of the packets?
		/// <summary>
		/// 0x0A
		/// </summary>
		[WireMember(4)]
		internal byte One { get; set; } = 1;

		//Why is this sent? Shouldn't we be in the same lobby?
		/// <summary>
		/// The number of the lobby being joined.
		/// 0x0B
		/// </summary>
		[WireMember(5)]
		public byte LobbyNumber { get; internal set; }

		//Once again, why is this sent? Shouldn't we know what block we're in?
		/// <summary>
		/// The number of the block.
		/// 0x0C
		/// </summary>
		[WireMember(6)]
		public short BlockNumber { get; internal set; }

		//TODO: What is this for?
		/// <summary>
		/// 0x0E
		/// </summary>
		[WireMember(7)]
		public short EventId { get; internal set; }

		//Sylverant lists this as padding.
		[WireMember(8)]
		internal int Padding { get; set; }

		//TODO: There is more to the packet here: https://github.com/Sylverant/ship_server/blob/b3bffc84b558821ca2002775ab2c3af5c6dde528/src/packets.h#L517
		[WireMember(10)]
		public CharacterJoinData[] LobbyCharacterData { get; internal set; }

		//This gets us closer to Teth packet.
		[WireMember(11)]
		internal short Padding2 { get; set; }

		public BlockLobbyJoinEventPayload(byte clientId, byte leaderId, byte lobbyNumber, short blockNumber, short eventId, CharacterJoinData[] lobbyCharacterData)
			: this()
		{
			ClientId = clientId;
			LeaderId = leaderId;
			LobbyNumber = lobbyNumber;
			BlockNumber = blockNumber;
			EventId = eventId;
			LobbyCharacterData = lobbyCharacterData ?? throw new ArgumentNullException(nameof(lobbyCharacterData));

			PlayerCount = lobbyCharacterData.Length;
		}

		public BlockLobbyJoinEventPayload()
			: base(GameNetworkOperationCode.LOBBY_JOIN_TYPE)
		{
			
		}
	}

	//THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
	/// <summary>
	/// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
	/// code for the Type: <see cref="BlockLobbyJoinEventPayload"/>
	/// </summary>
	public sealed class CustomBlockLobbyJoinEventPayloadSerializer
			: BaseAutoGeneratedSerializerStrategy<CustomBlockLobbyJoinEventPayloadSerializer, BlockLobbyJoinEventPayload>
	{
		/// <summary>
		/// Auto-generated deserialization/read method.
		/// Partial method implemented from shared partial definition.
		/// </summary>
		/// <param name="value">See external doc.</param>
		/// <param name="buffer">See external doc.</param>
		/// <param name="offset">See external doc.</param>
		public override void InternalRead(BlockLobbyJoinEventPayload value, Span<byte> buffer, ref int offset)
		{
			//Type: PSOBBGamePacketPayloadServer Field: 1 Name: OperationCode Type: GameNetworkOperationCode;
			value.OperationCode = GenericPrimitiveEnumTypeSerializerStrategy<GameNetworkOperationCode, Int16>.Instance.Read(buffer, ref offset);
			//Type: PSOBBGamePacketPayloadServer Field: 2 Name: Flags Type: Byte[];
			if(value.isFlagsSerialized) value.Flags = FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_4>.Instance.Read(buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 1 Name: PlayerCount Type: Int32;
			value.PlayerCount = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 2 Name: ClientId Type: Byte;
			value.ClientId = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 3 Name: LeaderId Type: Byte;
			value.LeaderId = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 4 Name: One Type: Byte;
			value.One = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 5 Name: LobbyNumber Type: Byte;
			value.LobbyNumber = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 6 Name: BlockNumber Type: Int16;
			value.BlockNumber = GenericTypePrimitiveSerializerStrategy<Int16>.Instance.Read(buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 7 Name: EventId Type: Int16;
			value.EventId = GenericTypePrimitiveSerializerStrategy<Int16>.Instance.Read(buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 8 Name: Padding Type: Int32;
			value.Padding = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);

			//This is where the CUSTOM serialization begins!
			//Type: BlockLobbyJoinEventPayload Field: 10 Name: LobbyCharacterData Type: CharacterJoinData[];
			value.LobbyCharacterData = new CharacterJoinData[value.PlayerCount];
			for(int i = 0; i < value.PlayerCount; i++)
				value.LobbyCharacterData[i] = CharacterJoinData_Serializer.Instance.Read(buffer, ref offset);

			value.Padding2 = GenericTypePrimitiveSerializerStrategy<short>.Instance.Read(buffer, ref offset);
		}

		/// <summary>
		/// Auto-generated serialization/write method.
		/// Partial method implemented from shared partial definition.
		/// </summary>
		/// <param name="value">See external doc.</param>
		/// <param name="buffer">See external doc.</param>
		/// <param name="offset">See external doc.</param>
		public override void InternalWrite(BlockLobbyJoinEventPayload value, Span<byte> buffer, ref int offset)
		{
			//Type: PSOBBGamePacketPayloadServer Field: 1 Name: OperationCode Type: GameNetworkOperationCode;
			GenericPrimitiveEnumTypeSerializerStrategy<GameNetworkOperationCode, Int16>.Instance.Write(value.OperationCode, buffer, ref offset);
			//Type: PSOBBGamePacketPayloadServer Field: 2 Name: Flags Type: Byte[];
			if(value.isFlagsSerialized) FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_4>.Instance.Write(value.Flags, buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 1 Name: PlayerCount Type: Int32;
			GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.PlayerCount, buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 2 Name: ClientId Type: Byte;
			BytePrimitiveSerializerStrategy.Instance.Write(value.ClientId, buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 3 Name: LeaderId Type: Byte;
			BytePrimitiveSerializerStrategy.Instance.Write(value.LeaderId, buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 4 Name: One Type: Byte;
			BytePrimitiveSerializerStrategy.Instance.Write(value.One, buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 5 Name: LobbyNumber Type: Byte;
			BytePrimitiveSerializerStrategy.Instance.Write(value.LobbyNumber, buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 6 Name: BlockNumber Type: Int16;
			GenericTypePrimitiveSerializerStrategy<Int16>.Instance.Write(value.BlockNumber, buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 7 Name: EventId Type: Int16;
			GenericTypePrimitiveSerializerStrategy<Int16>.Instance.Write(value.EventId, buffer, ref offset);
			//Type: BlockLobbyJoinEventPayload Field: 8 Name: Padding Type: Int32;
			GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.Padding, buffer, ref offset);

			//This is where the CUSTOM serialization begins!
			//Type: BlockLobbyJoinEventPayload Field: 10 Name: LobbyCharacterData Type: CharacterJoinData[];
			for(int i = 0; i < value.PlayerCount; i++)
				CharacterJoinData_Serializer.Instance.Write(value.LobbyCharacterData[i], buffer, ref offset);

			GenericTypePrimitiveSerializerStrategy<short>.Instance.Write(value.Padding2, buffer, ref offset);
		}
		private sealed class StaticTypedNumeric_Int32_4 : StaticTypedNumeric<Int32> { public sealed override Int32 Value => 4; }
	}
}
