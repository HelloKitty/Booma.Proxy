using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using Booma.Proxy;

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="PlayerInformationHeader"/>
    /// </summary>
    public sealed partial class PlayerInformationHeader_AutoGeneratedTemplateSerializerStrategy
        : BaseAutoGeneratedSerializerStrategy<PlayerInformationHeader_AutoGeneratedTemplateSerializerStrategy, PlayerInformationHeader>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(PlayerInformationHeader value, Span<byte> buffer, ref int offset)
        {
            //Type: PlayerInformationHeader Field: 4 Name: unk4 Type: Int32;
            value.unk4 = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
            //Type: PlayerInformationHeader Field: 5 Name: GuildCardNumber Type: UInt32;
            value.GuildCardNumber = GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Read(buffer, ref offset);
            //Type: PlayerInformationHeader Field: 6 Name: unk1 Type: UInt32[];
            value.unk1 = FixedSizePrimitiveArrayTypeSerializerStrategy<uint, StaticTypedNumeric_Int32_5>.Instance.Read(buffer, ref offset);
            //Type: PlayerInformationHeader Field: 7 Name: ClientId Type: Int32;
            value.ClientId = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
            //Type: PlayerInformationHeader Field: 9 Name: CharacterName Type: String;
            value.CharacterName = FixedSizeStringTypeSerializerStrategy<UTF16StringTypeSerializerStrategy, StaticTypedNumeric_Int32_16>.Instance.Read(buffer, ref offset);
            //Type: PlayerInformationHeader Field: 10 Name: unk3 Type: UInt32;
            value.unk3 = GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(PlayerInformationHeader value, Span<byte> buffer, ref int offset)
        {
            //Type: PlayerInformationHeader Field: 4 Name: unk4 Type: Int32;
            GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.unk4, buffer, ref offset);
            //Type: PlayerInformationHeader Field: 5 Name: GuildCardNumber Type: UInt32;
            GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Write(value.GuildCardNumber, buffer, ref offset);
            //Type: PlayerInformationHeader Field: 6 Name: unk1 Type: UInt32[];
            FixedSizePrimitiveArrayTypeSerializerStrategy<uint, StaticTypedNumeric_Int32_5>.Instance.Write(value.unk1, buffer, ref offset);
            //Type: PlayerInformationHeader Field: 7 Name: ClientId Type: Int32;
            GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.ClientId, buffer, ref offset);
            //Type: PlayerInformationHeader Field: 9 Name: CharacterName Type: String;
            FixedSizeStringTypeSerializerStrategy<UTF16StringTypeSerializerStrategy, StaticTypedNumeric_Int32_16>.Instance.Write(value.CharacterName, buffer, ref offset);
            //Type: PlayerInformationHeader Field: 10 Name: unk3 Type: UInt32;
            GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Write(value.unk3, buffer, ref offset);
        }
        private sealed class StaticTypedNumeric_Int32_5 : StaticTypedNumeric<Int32> { public sealed override Int32 Value => 5; }
        private sealed class StaticTypedNumeric_Int32_16 : StaticTypedNumeric<Int32> { public sealed override Int32 Value => 16; }
    }
}