using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using Booma;
namespace Booma
{
    [AutoGeneratedWireMessageImplementationAttribute]
    public partial class Sub60LobbySoccerBallMoveEventPayload
    {
        public override Type SerializableType => typeof(Sub60LobbySoccerBallMoveEventPayload);
        public override BaseSubCommand60 Read(Span<byte> buffer, ref int offset)
        {
            Sub60LobbySoccerBallMoveEventPayload_Serializer.Instance.InternalRead(this, buffer, ref offset);
            return this;
        }
        public override void Write(BaseSubCommand60 value, Span<byte> buffer, ref int offset)
        {
            Sub60LobbySoccerBallMoveEventPayload_Serializer.Instance.InternalWrite(this, buffer, ref offset);
        }
    }
}

namespace FreecraftCore.Serializer
{
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="Sub60LobbySoccerBallMoveEventPayload"/>
    /// </summary>
    public sealed partial class Sub60LobbySoccerBallMoveEventPayload_Serializer
            : BaseAutoGeneratedSerializerStrategy<Sub60LobbySoccerBallMoveEventPayload_Serializer, Sub60LobbySoccerBallMoveEventPayload>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(Sub60LobbySoccerBallMoveEventPayload value, Span<byte> buffer, ref int offset)
        {
            //Type: BaseSubCommand60 Field: 1 Name: CommandOperationCode Type: SubCommand60OperationCode;
            value.CommandOperationCode = GenericPrimitiveEnumTypeSerializerStrategy<SubCommand60OperationCode, Byte>.Instance.Read(buffer, ref offset);
            //Type: BaseSubCommand60 Field: 2 Name: CommandSize Type: Byte;
            if (value.isSizeSerialized)value.CommandSize = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 1 Name: ClientId Type: Byte;
            value.ClientId = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 2 Name: LeaderId Type: Byte;
            value.LeaderId = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 3 Name: TimeStamp Type: Int32;
            value.TimeStamp = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 4 Name: RawRotation Type: Int16;
            value.RawRotation = GenericTypePrimitiveSerializerStrategy<Int16>.Instance.Read(buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 5 Name: unk Type: Int16;
            value.unk = GenericTypePrimitiveSerializerStrategy<Int16>.Instance.Read(buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 6 Name: KickStartPosition Type: Vector2;
            value.KickStartPosition = Vector2_Single_Serializer.Instance.Read(buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 7 Name: UnknownBytes Type: Byte[];
            value.UnknownBytes = FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_4>.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(Sub60LobbySoccerBallMoveEventPayload value, Span<byte> buffer, ref int offset)
        {
            //Type: BaseSubCommand60 Field: 1 Name: CommandOperationCode Type: SubCommand60OperationCode;
            GenericPrimitiveEnumTypeSerializerStrategy<SubCommand60OperationCode, Byte>.Instance.Write(value.CommandOperationCode, buffer, ref offset);
            //Type: BaseSubCommand60 Field: 2 Name: CommandSize Type: Byte;
            if (value.isSizeSerialized)BytePrimitiveSerializerStrategy.Instance.Write(value.CommandSize, buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 1 Name: ClientId Type: Byte;
            BytePrimitiveSerializerStrategy.Instance.Write(value.ClientId, buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 2 Name: LeaderId Type: Byte;
            BytePrimitiveSerializerStrategy.Instance.Write(value.LeaderId, buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 3 Name: TimeStamp Type: Int32;
            GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.TimeStamp, buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 4 Name: RawRotation Type: Int16;
            GenericTypePrimitiveSerializerStrategy<Int16>.Instance.Write(value.RawRotation, buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 5 Name: unk Type: Int16;
            GenericTypePrimitiveSerializerStrategy<Int16>.Instance.Write(value.unk, buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 6 Name: KickStartPosition Type: Vector2;
            Vector2_Single_Serializer.Instance.Write(value.KickStartPosition, buffer, ref offset);
            //Type: Sub60LobbySoccerBallMoveEventPayload Field: 7 Name: UnknownBytes Type: Byte[];
            FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_4>.Instance.Write(value.UnknownBytes, buffer, ref offset);
        }
        private sealed class StaticTypedNumeric_Int32_4 : StaticTypedNumeric<Int32> { public sealed override Int32 Value => 4; }
    }
}