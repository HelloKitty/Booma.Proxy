using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using Booma;

namespace FreecraftCore.Serializer
{
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="CharacterInventoryData"/>
    /// </summary>
    public sealed partial class CharacterInventoryData_Serializer
            : BaseAutoGeneratedSerializerStrategy<CharacterInventoryData_Serializer, CharacterInventoryData>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(CharacterInventoryData value, Span<byte> buffer, ref int offset)
        {
            //Type: CharacterInventoryData Field: 1 Name: ItemCount Type: Byte;
            value.ItemCount = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: CharacterInventoryData Field: 2 Name: HpMaterialsUsed Type: Byte;
            value.HpMaterialsUsed = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: CharacterInventoryData Field: 3 Name: TpMaterialsUsed Type: Byte;
            value.TpMaterialsUsed = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: CharacterInventoryData Field: 4 Name: Language Type: Byte;
            value.Language = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: CharacterInventoryData Field: 5 Name: Items Type: InventoryItem[];
            value.Items = FixedSizeComplexArrayTypeSerializerStrategy<InventoryItem_Serializer, InventoryItem, StaticTypedNumeric_Int32_30>.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(CharacterInventoryData value, Span<byte> buffer, ref int offset)
        {
            //Type: CharacterInventoryData Field: 1 Name: ItemCount Type: Byte;
            BytePrimitiveSerializerStrategy.Instance.Write(value.ItemCount, buffer, ref offset);
            //Type: CharacterInventoryData Field: 2 Name: HpMaterialsUsed Type: Byte;
            BytePrimitiveSerializerStrategy.Instance.Write(value.HpMaterialsUsed, buffer, ref offset);
            //Type: CharacterInventoryData Field: 3 Name: TpMaterialsUsed Type: Byte;
            BytePrimitiveSerializerStrategy.Instance.Write(value.TpMaterialsUsed, buffer, ref offset);
            //Type: CharacterInventoryData Field: 4 Name: Language Type: Byte;
            BytePrimitiveSerializerStrategy.Instance.Write(value.Language, buffer, ref offset);
            //Type: CharacterInventoryData Field: 5 Name: Items Type: InventoryItem[];
            FixedSizeComplexArrayTypeSerializerStrategy<InventoryItem_Serializer, InventoryItem, StaticTypedNumeric_Int32_30>.Instance.Write(value.Items, buffer, ref offset);
        }
        private sealed class StaticTypedNumeric_Int32_30 : StaticTypedNumeric<Int32> { public sealed override Int32 Value => 30; }
    }
}