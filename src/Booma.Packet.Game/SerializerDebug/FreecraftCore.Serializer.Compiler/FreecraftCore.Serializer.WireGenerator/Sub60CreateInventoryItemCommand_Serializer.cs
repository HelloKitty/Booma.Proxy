using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using Booma;

namespace Booma
{
	[AutoGeneratedWireMessageImplementationAttribute]
	public partial class Sub60CreateInventoryItemCommand
	{
		public override Type SerializableType => typeof(Sub60CreateInventoryItemCommand);
		public override BaseSubCommand60 Read(Span<byte> buffer, ref int offset)
		{
			Sub60CreateInventoryItemCommand_Serializer.Instance.InternalRead(this, buffer, ref offset);
			return this;
		}

		public override void Write(BaseSubCommand60 value, Span<byte> buffer, ref int offset)
		{
			Sub60CreateInventoryItemCommand_Serializer.Instance.InternalWrite(this, buffer, ref offset);
		}
	}
}

namespace FreecraftCore.Serializer
{
	[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
	//THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
	/// <summary>
	/// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
	/// code for the Type: <see cref = "Sub60CreateInventoryItemCommand"/>
	/// </summary>
	public sealed partial class Sub60CreateInventoryItemCommand_Serializer : BaseAutoGeneratedSerializerStrategy<Sub60CreateInventoryItemCommand_Serializer, Sub60CreateInventoryItemCommand>
	{
		/// <summary>
		/// Auto-generated deserialization/read method.
		/// Partial method implemented from shared partial definition.
		/// </summary>
		/// <param name = "value">See external doc.</param>
		/// <param name = "buffer">See external doc.</param>
		/// <param name = "offset">See external doc.</param>
		public override void InternalRead(Sub60CreateInventoryItemCommand value, Span<byte> buffer, ref int offset)
		{
			//Type: BaseSubCommand60 Field: 1 Name: CommandOperationCode Type: SubCommand60OperationCode
			;
			value.CommandOperationCode = GenericPrimitiveEnumTypeSerializerStrategy<SubCommand60OperationCode, Byte>.Instance.Read(buffer, ref offset);
			//Type: BaseSubCommand60 Field: 2 Name: CommandSize Type: Byte
			;
			if (value.isSizeSerialized)
			value.CommandSize = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 1 Name: Identifier Type: Byte
			;
			value.Identifier = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 2 Name: Unknown1 Type: Byte
			;
			value.Unknown1 = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 3 Name: ItemData1 Type: Byte[]
			;
			value.ItemData1 = FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_12>.Instance.Read(buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 4 Name: ItemId Type: UInt32
			;
			value.ItemId = GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Read(buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 5 Name: ItemData2 Type: Byte[]
			;
			value.ItemData2 = FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_4>.Instance.Read(buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 6 Name: Unknown2 Type: UInt32
			;
			value.Unknown2 = GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Read(buffer, ref offset);
		}

		/// <summary>
		/// Auto-generated serialization/write method.
		/// Partial method implemented from shared partial definition.
		/// </summary>
		/// <param name = "value">See external doc.</param>
		/// <param name = "buffer">See external doc.</param>
		/// <param name = "offset">See external doc.</param>
		public override void InternalWrite(Sub60CreateInventoryItemCommand value, Span<byte> buffer, ref int offset)
		{
			//Type: BaseSubCommand60 Field: 1 Name: CommandOperationCode Type: SubCommand60OperationCode
			;
			GenericPrimitiveEnumTypeSerializerStrategy<SubCommand60OperationCode, Byte>.Instance.Write(value.CommandOperationCode, buffer, ref offset);
			//Type: BaseSubCommand60 Field: 2 Name: CommandSize Type: Byte
			;
			if (value.isSizeSerialized)
			BytePrimitiveSerializerStrategy.Instance.Write(value.CommandSize, buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 1 Name: Identifier Type: Byte
			;
			BytePrimitiveSerializerStrategy.Instance.Write(value.Identifier, buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 2 Name: Unknown1 Type: Byte
			;
			BytePrimitiveSerializerStrategy.Instance.Write(value.Unknown1, buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 3 Name: ItemData1 Type: Byte[]
			;
			FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_12>.Instance.Write(value.ItemData1, buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 4 Name: ItemId Type: UInt32
			;
			GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Write(value.ItemId, buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 5 Name: ItemData2 Type: Byte[]
			;
			FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_4>.Instance.Write(value.ItemData2, buffer, ref offset);
			//Type: Sub60CreateInventoryItemCommand Field: 6 Name: Unknown2 Type: UInt32
			;
			GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Write(value.Unknown2, buffer, ref offset);
		}

		private sealed class StaticTypedNumeric_Int32_12 : StaticTypedNumeric<Int32>
		{
			public sealed override Int32 Value => 12;
		}

		private sealed class StaticTypedNumeric_Int32_4 : StaticTypedNumeric<Int32>
		{
			public sealed override Int32 Value => 4;
		}
	}
}