<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sirenix.Serialization</name>
    </assembly>
    <members>
        <member name="T:Sirenix.Serialization.BaseDataReader">
            <summary>
            Provides basic functionality and overridable abstract methods for implementing a data reader.
            <para />
            If you inherit this class, it is VERY IMPORTANT that you implement each abstract method to the *exact* specifications the documentation specifies.
            </summary>
            <seealso cref="T:Sirenix.Serialization.BaseDataReaderWriter" />
            <seealso cref="T:Sirenix.Serialization.IDataReader" />
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.#ctor(System.IO.Stream,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.BaseDataReader" /> class.
            </summary>
            <param name="stream">The base stream of the reader.</param>
            <param name="context">The deserialization context to use.</param>
            <exception cref="T:System.ArgumentNullException">The stream or context is null.</exception>
            <exception cref="T:System.ArgumentException">Cannot read from stream.</exception>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReader.CurrentNodeId">
            <summary>
            Gets the current node id. If this is less than zero, the current node has no id.
            </summary>
            <value>
            The current node id.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReader.CurrentNodeDepth">
            <summary>
            Gets the current node depth. In other words, the current count of the node stack.
            </summary>
            <value>
            The current node depth.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReader.CurrentNodeName">
            <summary>
            Gets the name of the current node.
            </summary>
            <value>
            The name of the current node.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReader.Stream">
            <summary>
            Gets or sets the base stream of the reader.
            </summary>
            <value>
            The base stream of the reader.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.ArgumentException">Cannot read from stream</exception>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReader.Context">
            <summary>
            Gets the deserialization context.
            </summary>
            <value>
            The deserialization context.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.EnterNode(System.Type@)">
            <summary>
            Tries to enter a node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfNode"/>.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="!:IDataReader.ExitNode(DeserializationContext)"/>
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId"/> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth"/> properties to the correct values for the current node.
            </summary>
            <param name="type">The type of the node. This value will be null if there was no metadata, or if the reader's serialization binder failed to resolve the type name.</param>
            <returns><c>true</c> if entering a node succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ExitNode">
            <summary>
            Exits the current node. This method will keep skipping entries using <see cref="!:IDataReader.SkipEntry(DeserializationContext)"/> until an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> is reached, or the end of the stream is reached.
            <para />
            This call MUST have been preceded by a corresponding call to <see cref="M:Sirenix.Serialization.IDataReader.EnterNode(System.Type@)"/>.
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId"/> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth"/> to the correct values for the node that was prior to the current node.
            </summary>
            <returns><c>true</c> if the method exited a node, <c>false</c> if it reached the end of the stream.</returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.EnterArray(System.Int64@)">
            <summary>
            Tries to enters an array node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfArray"/>.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="!:IDataReader.ExitArray(DeserializationContext)"/>
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId"/> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth"/> properties to the correct values for the current array node.
            </summary>
            <param name="length">The length of the array that was entered.</param>
            <returns><c>true</c> if an array was entered, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ExitArray">
            <summary>
            Exits the closest array. This method will keep skipping entries using <see cref="!:IDataReader.SkipEntry(DeserializationContext)"/> until an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/> is reached, or the end of the stream is reached.
            <para />
            This call MUST have been preceded by a corresponding call to <see cref="!:IDataReader.EnterArray(out long)(out Type)"/>.
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId"/> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth"/> to the correct values for the node that was prior to the exited array node.
            </summary>
            <returns><c>true</c> if the method exited an array, <c>false</c> if it reached the end of the stream.</returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadPrimitiveArray``1(``0[]@)">
            <summary>
            Reads a primitive array value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.PrimitiveArray"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)"/>.</typeparam>
            <param name="array">The resulting primitive array.</param>
            <returns><c>true</c> if reading a primitive array succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.PeekEntry(System.String@)">
            <summary>
            Peeks ahead and returns the type of the next entry in the stream.
            </summary>
            <param name="name">The name of the next entry, if it has one.</param>
            <returns>The type of the next entry.</returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadInternalReference(System.Int32@)">
            <summary>
            Reads an internal reference id. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.InternalReference"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="id">The internal reference id.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadExternalReference(System.Int32@)">
            <summary>
            Reads an external reference index. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByIndex"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="index">The external reference index.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadExternalReference(System.Guid@)">
            <summary>
            Reads an external reference guid. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByGuid"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="guid">The external reference guid.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadExternalReference(System.String@)">
            <summary>
            Reads an external reference string. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByString" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="id">The external reference string.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadChar(System.Char@)">
            <summary>
            Reads a <see cref="T:System.Char"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.String"/>.
            <para />
            If the string of the entry is longer than 1 character, the first character of the string will be taken as the result.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadString(System.String@)">
            <summary>
            Reads a <see cref="T:System.String"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.String"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadGuid(System.Guid@)">
            <summary>
            Reads a <see cref="T:System.Guid"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Guid"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadSByte(System.SByte@)">
            <summary>
            Reads an <see cref="T:System.SByte"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.SByte.MinValue"/> or larger than <see cref="F:System.SByte.MaxValue"/>, the result will be default(<see cref="T:System.SByte"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadInt16(System.Int16@)">
            <summary>
            Reads a <see cref="T:System.Int16"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int16.MinValue"/> or larger than <see cref="F:System.Int16.MaxValue"/>, the result will be default(<see cref="T:System.Int16"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadInt32(System.Int32@)">
            <summary>
            Reads an <see cref="T:System.Int32"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int32.MinValue"/> or larger than <see cref="F:System.Int32.MaxValue"/>, the result will be default(<see cref="T:System.Int32"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadInt64(System.Int64@)">
            <summary>
            Reads a <see cref="T:System.Int64"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int64.MinValue"/> or larger than <see cref="F:System.Int64.MaxValue"/>, the result will be default(<see cref="T:System.Int64"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadByte(System.Byte@)">
            <summary>
            Reads a <see cref="T:System.Byte"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Byte.MinValue"/> or larger than <see cref="F:System.Byte.MaxValue"/>, the result will be default(<see cref="T:System.Byte"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadUInt16(System.UInt16@)">
            <summary>
            Reads an <see cref="T:System.UInt16"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt16.MinValue"/> or larger than <see cref="F:System.UInt16.MaxValue"/>, the result will be default(<see cref="T:System.UInt16"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadUInt32(System.UInt32@)">
            <summary>
            Reads an <see cref="T:System.UInt32"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt32.MinValue"/> or larger than <see cref="F:System.UInt32.MaxValue"/>, the result will be default(<see cref="T:System.UInt32"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadUInt64(System.UInt64@)">
            <summary>
            Reads an <see cref="T:System.UInt64"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt64.MinValue"/> or larger than <see cref="F:System.UInt64.MaxValue"/>, the result will be default(<see cref="T:System.UInt64"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadDecimal(System.Decimal@)">
            <summary>
            Reads a <see cref="T:System.Decimal"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint"/> or an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Decimal.MinValue"/> or larger than <see cref="F:System.Decimal.MaxValue"/>, the result will be default(<see cref="T:System.Decimal"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadSingle(System.Single@)">
            <summary>
            Reads a <see cref="T:System.Single"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint"/> or an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Single.MinValue"/> or larger than <see cref="F:System.Single.MaxValue"/>, the result will be default(<see cref="T:System.Single"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadDouble(System.Double@)">
            <summary>
            Reads a <see cref="T:System.Double"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint"/> or an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Double.MinValue"/> or larger than <see cref="F:System.Double.MaxValue"/>, the result will be default(<see cref="T:System.Double"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadBoolean(System.Boolean@)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Boolean"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadNull">
            <summary>
            Reads a <c>null</c> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Null"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.SkipEntry">
            <summary>
            Skips the next entry value, unless it is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>. If the next entry value is an <see cref="F:Sirenix.Serialization.EntryType.StartOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.StartOfArray"/>, all of its contents will be processed, deserialized and registered in the deserialization context, so that internal reference values are not lost to entries further down the stream.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.Dispose">
            <summary>
            Disposes all resources and streams kept by the data reader.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.PrepareNewSerializationSession">
            <summary>
            Tells the reader that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions.
            This method is only relevant when the same reader is used to deserialize several different, unrelated values.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.PeekEntry">
            <summary>
            Peeks the current entry.
            </summary>
            <returns>The peeked entry.</returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReader.ReadToNextEntry">
            <summary>
            Consumes the current entry, and reads to the next one.
            </summary>
            <returns>The next entry.</returns>
        </member>
        <member name="T:Sirenix.Serialization.BaseDataReaderWriter">
            <summary>
            Implements functionality that is shared by both data readers and data writers.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReaderWriter.Binder">
            <summary>
            Gets or sets the reader's or writer's serialization binder.
            </summary>
            <value>
            The reader's or writer's serialization binder.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReaderWriter.IsInArrayNode">
            <summary>
            Gets a value indicating whether the reader or writer is in an array node.
            </summary>
            <value>
            <c>true</c> if the reader or writer is in an array node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReaderWriter.NodeDepth">
            <summary>
            Gets the current node depth. In other words, the current count of the node stack.
            </summary>
            <value>
            The current node depth.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataReaderWriter.CurrentNode">
            <summary>
            Gets the current node, or <see cref="F:Sirenix.Serialization.NodeInfo.Empty"/> if there is no current node.
            </summary>
            <value>
            The current node.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReaderWriter.PushNode(Sirenix.Serialization.NodeInfo)">
            <summary>
            Pushes a node onto the node stack.
            </summary>
            <param name="node">The node to push.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReaderWriter.PushNode(System.String,System.Int32,System.Type)">
            <summary>
            Pushes a node with the given name, id and type onto the node stack.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="id">The id of the node.</param>
            <param name="type">The type of the node.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReaderWriter.PushArray">
            <summary>
            Pushes an array node onto the node stack. This uses values from the current node to provide extra info about the array node.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReaderWriter.PopNode(System.String)">
            <summary>
            Pops the current node off of the node stack.
            </summary>
            <param name="name">The name of the node to pop.</param>
            <exception cref="T:System.InvalidOperationException">
            There are no nodes to pop.
            or
            Tried to pop node with given name, but the current node's name was different.
            </exception>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataReaderWriter.PopArray">
            <summary>
            Pops the current node if the current node is an array node.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.BaseDataWriter">
            <summary>
            Provides basic functionality and overridable abstract methods for implementing a data writer.
            <para />
            If you inherit this class, it is VERY IMPORTANT that you implement each abstract method to the *exact* specifications the documentation specifies.
            </summary>
            <seealso cref="T:Sirenix.Serialization.BaseDataReaderWriter" />
            <seealso cref="T:Sirenix.Serialization.IDataWriter" />
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.#ctor(System.IO.Stream,Sirenix.Serialization.SerializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.BaseDataWriter" /> class.
            </summary>
            <param name="stream">The base stream of the writer.</param>
            <param name="context">The serialization context to use.</param>
            <exception cref="T:System.ArgumentNullException">The stream or context is null.</exception>
            <exception cref="T:System.ArgumentException">Cannot write to the stream.</exception>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataWriter.Stream">
            <summary>
            Gets or sets the base stream of the writer.
            </summary>
            <value>
            The base stream of the writer.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.ArgumentException">Cannot write to stream</exception>
        </member>
        <member name="P:Sirenix.Serialization.BaseDataWriter.Context">
            <summary>
            Gets the serialization context.
            </summary>
            <value>
            The serialization context.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.FlushToStream">
            <summary>
            Flushes everything that has been written so far to the writer's base stream.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.BeginReferenceNode(System.String,System.Type,System.Int32)">
            <summary>
            Writes the beginning of a reference node.
            <para />
            This call MUST eventually be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)"/>, with the same name.
            </summary>
            <param name="name">The name of the reference node.</param>
            <param name="type">The type of the reference node. If null, no type metadata will be written.</param>
            <param name="id">The id of the reference node. This id is acquired by calling <see cref="M:Sirenix.Serialization.SerializationContext.TryRegisterInternalReference(System.Object,System.Int32@)"/>.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.BeginStructNode(System.String,System.Type)">
            <summary>
            Begins a struct/value type node. This is essentially the same as a reference node, except it has no internal reference id.
            <para />
            This call MUST eventually be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)"/>, with the same name.
            </summary>
            <param name="name">The name of the struct node.</param>
            <param name="type">The type of the struct node. If null, no type metadata will be written.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.EndNode(System.String)">
            <summary>
            Ends the current node with the given name. If the current node has another name, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <param name="name">The name of the node to end. This has to be the name of the current node.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.BeginArrayNode(System.Int64)">
            <summary>
            Begins an array node of the given length.
            </summary>
            <param name="length">The length of the array to come.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.EndArrayNode">
            <summary>
            Ends the current array node, if the current node is an array node.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WritePrimitiveArray``1(``0[])">
            <summary>
            Writes a primitive array to the stream.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)"/>.</typeparam>
            <param name="array">The primitive array to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteNull(System.String)">
            <summary>
            Writes a null value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteInternalReference(System.String,System.Int32)">
            <summary>
            Writes an internal reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="id">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteExternalReference(System.String,System.Int32)">
            <summary>
            Writes an external index reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="index">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteExternalReference(System.String,System.Guid)">
            <summary>
            Writes an external guid reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="guid">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteExternalReference(System.String,System.String)">
            <summary>
            Writes an external string reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="id">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteChar(System.String,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteString(System.String,System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteGuid(System.String,System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteSByte(System.String,System.SByte)">
            <summary>
            Writes an <see cref="T:System.SByte"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteInt16(System.String,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteInt32(System.String,System.Int32)">
            <summary>
            Writes an <see cref="T:System.Int32"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteInt64(System.String,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteByte(System.String,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteUInt16(System.String,System.UInt16)">
            <summary>
            Writes an <see cref="T:System.UInt16"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteUInt32(System.String,System.UInt32)">
            <summary>
            Writes an <see cref="T:System.UInt32"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteUInt64(System.String,System.UInt64)">
            <summary>
            Writes an <see cref="T:System.UInt64"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteDecimal(System.String,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteSingle(System.String,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteDouble(System.String,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.Dispose">
            <summary>
            Disposes all resources and streams kept by the data writer.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BaseDataWriter.PrepareNewSerializationSession">
            <summary>
            Tells the writer that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions.
            This method is only relevant when the same writer is used to serialize several different, unrelated values.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.BinaryDataReader">
            <summary>
            Reads data from a stream that has been written by a <see cref="T:Sirenix.Serialization.BinaryDataWriter"/>.
            </summary>
            <seealso cref="T:Sirenix.Serialization.BaseDataReader" />
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.#ctor(System.IO.Stream,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.BinaryDataReader" /> class.
            </summary>
            <param name="stream">The base stream of the reader.</param>
            <param name="context">The deserialization context to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.Dispose">
            <summary>
            Disposes all resources and streams kept by the data reader.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.PeekEntry(System.String@)">
            <summary>
            Peeks ahead and returns the type of the next entry in the stream.
            </summary>
            <param name="name">The name of the next entry, if it has one.</param>
            <returns>
            The type of the next entry.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.EnterArray(System.Int64@)">
            <summary>
            Tries to enters an array node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfArray" />.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataReader.ExitArray" /><para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> properties to the correct values for the current array node.
            </summary>
            <param name="length">The length of the array that was entered.</param>
            <returns>
              <c>true</c> if an array was entered, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.EnterNode(System.Type@)">
            <summary>
            Tries to enter a node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfNode" />.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataReader.ExitNode" /><para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> properties to the correct values for the current node.
            </summary>
            <param name="type">The type of the node. This value will be null if there was no metadata, or if the reader's serialization binder failed to resolve the type name.</param>
            <returns>
              <c>true</c> if entering a node succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ExitArray">
            <summary>
            Exits the closest array. This method will keep skipping entries using <see cref="M:Sirenix.Serialization.IDataReader.SkipEntry" /> until an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" /> is reached, or the end of the stream is reached.
            <para />
            This call MUST have been preceded by a corresponding call to <see cref="!:IDataReader.EnterArray(out long)(out Type)" />.
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> to the correct values for the node that was prior to the exited array node.
            </summary>
            <returns>
              <c>true</c> if the method exited an array, <c>false</c> if it reached the end of the stream.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ExitNode">
            <summary>
            Exits the current node. This method will keep skipping entries using <see cref="M:Sirenix.Serialization.IDataReader.SkipEntry" /> until an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> is reached, or the end of the stream is reached.
            <para />
            This call MUST have been preceded by a corresponding call to <see cref="M:Sirenix.Serialization.IDataReader.EnterNode(System.Type@)" />.
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> to the correct values for the node that was prior to the current node.
            </summary>
            <returns>
              <c>true</c> if the method exited a node, <c>false</c> if it reached the end of the stream.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadPrimitiveArray``1(``0[]@)">
            <summary>
            Reads a primitive array value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.PrimitiveArray" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)" />.</typeparam>
            <param name="array">The resulting primitive array.</param>
            <returns>
              <c>true</c> if reading a primitive array succeeded, otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentException">Type  + typeof(T).Name +  is not a valid primitive array type.</exception>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadBoolean(System.Boolean@)">
            <summary>
            Reads a <see cref="T:System.Boolean" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Boolean" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadSByte(System.SByte@)">
            <summary>
            Reads an <see cref="T:System.SByte" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.SByte.MinValue" /> or larger than <see cref="F:System.SByte.MaxValue" />, the result will be default(<see cref="T:System.SByte" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadByte(System.Byte@)">
            <summary>
            Reads a <see cref="T:System.Byte" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Byte.MinValue" /> or larger than <see cref="F:System.Byte.MaxValue" />, the result will be default(<see cref="T:System.Byte" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadInt16(System.Int16@)">
            <summary>
            Reads a <see cref="T:System.Int16" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int16.MinValue" /> or larger than <see cref="F:System.Int16.MaxValue" />, the result will be default(<see cref="T:System.Int16" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadUInt16(System.UInt16@)">
            <summary>
            Reads an <see cref="T:System.UInt16" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt16.MinValue" /> or larger than <see cref="F:System.UInt16.MaxValue" />, the result will be default(<see cref="T:System.UInt16" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadInt32(System.Int32@)">
            <summary>
            Reads an <see cref="T:System.Int32" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int32.MinValue" /> or larger than <see cref="F:System.Int32.MaxValue" />, the result will be default(<see cref="T:System.Int32" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadUInt32(System.UInt32@)">
            <summary>
            Reads an <see cref="T:System.UInt32" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt32.MinValue" /> or larger than <see cref="F:System.UInt32.MaxValue" />, the result will be default(<see cref="T:System.UInt32" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadInt64(System.Int64@)">
            <summary>
            Reads a <see cref="T:System.Int64" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int64.MinValue" /> or larger than <see cref="F:System.Int64.MaxValue" />, the result will be default(<see cref="T:System.Int64" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadUInt64(System.UInt64@)">
            <summary>
            Reads an <see cref="T:System.UInt64" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt64.MinValue" /> or larger than <see cref="F:System.UInt64.MaxValue" />, the result will be default(<see cref="T:System.UInt64" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadChar(System.Char@)">
            <summary>
            Reads a <see cref="T:System.Char" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.String" />.
            <para />
            If the string of the entry is longer than 1 character, the first character of the string will be taken as the result.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadSingle(System.Single@)">
            <summary>
            Reads a <see cref="T:System.Single" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint" /> or an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Single.MinValue" /> or larger than <see cref="F:System.Single.MaxValue" />, the result will be default(<see cref="T:System.Single" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadDouble(System.Double@)">
            <summary>
            Reads a <see cref="T:System.Double" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint" /> or an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Double.MinValue" /> or larger than <see cref="F:System.Double.MaxValue" />, the result will be default(<see cref="T:System.Double" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadDecimal(System.Decimal@)">
            <summary>
            Reads a <see cref="T:System.Decimal" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint" /> or an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Decimal.MinValue" /> or larger than <see cref="F:System.Decimal.MaxValue" />, the result will be default(<see cref="T:System.Decimal" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadExternalReference(System.Guid@)">
            <summary>
            Reads an external reference guid. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByGuid" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="guid">The external reference guid.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadGuid(System.Guid@)">
            <summary>
            Reads a <see cref="T:System.Guid" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Guid" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadExternalReference(System.Int32@)">
            <summary>
            Reads an external reference index. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByIndex" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="index">The external reference index.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadExternalReference(System.String@)">
            <summary>
            Reads an external reference string. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByString" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="id">The external reference string.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadNull">
            <summary>
            Reads a <c>null</c> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Null" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadInternalReference(System.Int32@)">
            <summary>
            Reads an internal reference id. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.InternalReference" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="id">The internal reference id.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadString(System.String@)">
            <summary>
            Reads a <see cref="T:System.String" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.String" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.PrepareNewSerializationSession">
            <summary>
            Tells the reader that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions.
            This method is only relevant when the same reader is used to deserialize several different, unrelated values.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.PeekEntry">
            <summary>
            Peeks the current entry.
            </summary>
            <returns>The peeked entry.</returns>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataReader.ReadToNextEntry">
            <summary>
            Consumes the current entry, and reads to the next one.
            </summary>
            <returns>The next entry.</returns>
        </member>
        <member name="T:Sirenix.Serialization.BinaryDataWriter">
            <summary>
            Writes data to a stream that can be read by a <see cref="T:Sirenix.Serialization.BinaryDataReader"/>.
            </summary>
            <seealso cref="T:Sirenix.Serialization.BaseDataWriter" />
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.#ctor(System.IO.Stream,Sirenix.Serialization.SerializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.BinaryDataWriter" /> class.
            </summary>
            <param name="stream">The base stream of the writer.</param>
            <param name="context">The serialization context to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.BeginArrayNode(System.Int64)">
            <summary>
            Begins an array node of the given length.
            </summary>
            <param name="length">The length of the array to come.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.BeginReferenceNode(System.String,System.Type,System.Int32)">
            <summary>
            Writes the beginning of a reference node.
            <para />
            This call MUST eventually be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)" />, with the same name.
            </summary>
            <param name="name">The name of the reference node.</param>
            <param name="type">The type of the reference node. If null, no type metadata will be written.</param>
            <param name="id">The id of the reference node. This id is acquired by calling <see cref="M:Sirenix.Serialization.SerializationContext.TryRegisterInternalReference(System.Object,System.Int32@)" />.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.BeginStructNode(System.String,System.Type)">
            <summary>
            Begins a struct/value type node. This is essentially the same as a reference node, except it has no internal reference id.
            <para />
            This call MUST eventually be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)" />, with the same name.
            </summary>
            <param name="name">The name of the struct node.</param>
            <param name="type">The type of the struct node. If null, no type metadata will be written.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.Dispose">
            <summary>
            Disposes all resources and streams kept by the data writer.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.EndArrayNode">
            <summary>
            Ends the current array node, if the current node is an array node.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.EndNode(System.String)">
            <summary>
            Ends the current node with the given name. If the current node has another name, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <param name="name">The name of the node to end. This has to be the name of the current node.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WritePrimitiveArray``1(``0[])">
            <summary>
            Writes a primitive array to the stream.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)" />.</typeparam>
            <param name="array">The primitive array to write.</param>
            <exception cref="T:System.ArgumentException">Type  + typeof(T).Name +  is not a valid primitive array type.</exception>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteByte(System.String,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteChar(System.String,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteDecimal(System.String,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteDouble(System.String,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteGuid(System.String,System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteExternalReference(System.String,System.Guid)">
            <summary>
            Writes an external guid reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="guid">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteExternalReference(System.String,System.Int32)">
            <summary>
            Writes an external index reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="index">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteExternalReference(System.String,System.String)">
            <summary>
            Writes an external string reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="id">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteInt32(System.String,System.Int32)">
            <summary>
            Writes an <see cref="T:System.Int32" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteInt64(System.String,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteNull(System.String)">
            <summary>
            Writes a null value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteInternalReference(System.String,System.Int32)">
            <summary>
            Writes an internal reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="id">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteSByte(System.String,System.SByte)">
            <summary>
            Writes an <see cref="T:System.SByte" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteInt16(System.String,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteSingle(System.String,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteString(System.String,System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteUInt32(System.String,System.UInt32)">
            <summary>
            Writes an <see cref="T:System.UInt32" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteUInt64(System.String,System.UInt64)">
            <summary>
            Writes an <see cref="T:System.UInt64" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.WriteUInt16(System.String,System.UInt16)">
            <summary>
            Writes an <see cref="T:System.UInt16" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.BinaryDataWriter.PrepareNewSerializationSession">
            <summary>
            Tells the writer that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions.
            This method is only relevant when the same writer is used to serialize several different, unrelated values.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.BinaryEntryType">
            <summary>
            Entry types in the binary format written by <see cref="T:Sirenix.Serialization.BinaryDataWriter"/>.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.Invalid">
            <summary>
            An invalid entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedStartOfReferenceNode">
            <summary>
            Entry denoting a named start of a reference node.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedStartOfReferenceNode">
            <summary>
            Entry denoting an unnamed start of a reference node.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedStartOfStructNode">
            <summary>
            Entry denoting a named start of a struct node.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedStartOfStructNode">
            <summary>
            Entry denoting an unnamed start of a struct node.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.EndOfNode">
            <summary>
            Entry denoting an end of node.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.StartOfArray">
            <summary>
            Entry denoting the start of an array.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.EndOfArray">
            <summary>
            Entry denoting the end of an array.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.PrimitiveArray">
            <summary>
            Entry denoting a primitive array.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedInternalReference">
            <summary>
            Entry denoting a named internal reference.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedInternalReference">
            <summary>
            Entry denoting an unnamed internal reference.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedExternalReferenceByIndex">
            <summary>
            Entry denoting a named external reference by index.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedExternalReferenceByIndex">
            <summary>
            Entry denoting an unnamed external reference by index.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedExternalReferenceByGuid">
            <summary>
            Entry denoting a named external reference by guid.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedExternalReferenceByGuid">
            <summary>
            Entry denoting an unnamed external reference by guid.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedSByte">
            <summary>
            Entry denoting a named sbyte.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedSByte">
            <summary>
            Entry denoting an unnamed sbyte.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedByte">
            <summary>
            Entry denoting a named byte.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedByte">
            <summary>
            Entry denoting an unnamed byte.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedShort">
            <summary>
            Entry denoting a named short.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedShort">
            <summary>
            Entry denoting an unnamed short.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedUShort">
            <summary>
            Entry denoting a named ushort.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedUShort">
            <summary>
            Entry denoting an unnamed ushort.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedInt">
            <summary>
            Entry denoting a named int.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedInt">
            <summary>
            Entry denoting an unnamed int.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedUInt">
            <summary>
            Entry denoting a named uint.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedUInt">
            <summary>
            Entry denoting an unnamed uint.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedLong">
            <summary>
            Entry denoting a named long.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedLong">
            <summary>
            Entry denoting an unnamed long.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedULong">
            <summary>
            Entry denoting a named ulong.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedULong">
            <summary>
            Entry denoting an unnamed ulong.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedFloat">
            <summary>
            Entry denoting a named float.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedFloat">
            <summary>
            Entry denoting an unnamed float.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedDouble">
            <summary>
            Entry denoting a named double.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedDouble">
            <summary>
            Entry denoting an unnamed double.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedDecimal">
            <summary>
            Entry denoting a named decimal.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedDecimal">
            <summary>
            Entry denoting an unnamed decimal.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedChar">
            <summary>
            Entry denoting a named char.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedChar">
            <summary>
            Entry denoting an unnamed char.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedString">
            <summary>
            Entry denoting a named string.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedString">
            <summary>
            Entry denoting an unnamed string.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedGuid">
            <summary>
            Entry denoting a named guid.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedGuid">
            <summary>
            Entry denoting an unnamed guid.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedBoolean">
            <summary>
            Entry denoting a named boolean.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedBoolean">
            <summary>
            Entry denoting an unnamed boolean.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedNull">
            <summary>
            Entry denoting a named null.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedNull">
            <summary>
            Entry denoting an unnamed null.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.TypeName">
            <summary>
            Entry denoting a type name.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.TypeID">
            <summary>
            Entry denoting a type id.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.EndOfStream">
            <summary>
            Entry denoting that the end of the stream has been reached.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.NamedExternalReferenceByString">
            <summary>
            Entry denoting a named external reference by string.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BinaryEntryType.UnnamedExternalReferenceByString">
            <summary>
            Entry denoting an unnamed external reference by string.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.IDataReader">
            <summary>
            Provides a set of methods for reading data stored in a format written by a corresponding <see cref="T:Sirenix.Serialization.IDataWriter"/> class.
            <para />
            If you implement this interface, it is VERY IMPORTANT that you implement each method to the *exact* specifications the documentation specifies.
            <para />
            It is strongly recommended to inherit from the <see cref="T:Sirenix.Serialization.BaseDataReader"/> class if you wish to implement a new data reader.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Sirenix.Serialization.IDataReader.Binder">
            <summary>
            Gets or sets the reader's serialization binder.
            </summary>
            <value>
            The reader's serialization binder.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataReader.Stream">
            <summary>
            Gets or sets the base stream of the reader.
            </summary>
            <value>
            The base stream of the reader.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataReader.IsInArrayNode">
            <summary>
            Gets a value indicating whether the reader is in an array node.
            </summary>
            <value>
            <c>true</c> if the reader is in an array node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataReader.CurrentNodeName">
            <summary>
            Gets the name of the current node.
            </summary>
            <value>
            The name of the current node.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataReader.CurrentNodeId">
            <summary>
            Gets the current node id. If this is less than zero, the current node has no id.
            </summary>
            <value>
            The current node id.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth">
            <summary>
            Gets the current node depth. In other words, the current count of the node stack.
            </summary>
            <value>
            The current node depth.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataReader.Context">
            <summary>
            Gets the deserialization context.
            </summary>
            <value>
            The deserialization context.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.EnterNode(System.Type@)">
            <summary>
            Tries to enter a node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfNode"/>.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="!:IDataReader.ExitNode(DeserializationContext)"/>
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId"/> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth"/> properties to the correct values for the current node.
            </summary>
            <param name="type">The type of the node. This value will be null if there was no metadata, or if the reader's serialization binder failed to resolve the type name.</param>
            <returns><c>true</c> if entering a node succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ExitNode">
            <summary>
            Exits the current node. This method will keep skipping entries using <see cref="!:IDataReader.SkipEntry(DeserializationContext)"/> until an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> is reached, or the end of the stream is reached.
            <para />
            This call MUST have been preceded by a corresponding call to <see cref="M:Sirenix.Serialization.IDataReader.EnterNode(System.Type@)"/>.
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId"/> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth"/> to the correct values for the node that was prior to the current node.
            </summary>
            <returns><c>true</c> if the method exited a node, <c>false</c> if it reached the end of the stream.</returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.EnterArray(System.Int64@)">
            <summary>
            Tries to enters an array node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfArray"/>.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="!:IDataReader.ExitArray(DeserializationContext)"/>
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId"/> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth"/> properties to the correct values for the current array node.
            </summary>
            <param name="length">The length of the array that was entered.</param>
            <returns><c>true</c> if an array was entered, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ExitArray">
            <summary>
            Exits the closest array. This method will keep skipping entries using <see cref="!:IDataReader.SkipEntry(DeserializationContext)"/> until an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/> is reached, or the end of the stream is reached.
            <para />
            This call MUST have been preceded by a corresponding call to <see cref="!:IDataReader.EnterArray(out long)(out Type)"/>.
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName"/>, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId"/> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth"/> to the correct values for the node that was prior to the exited array node.
            </summary>
            <returns><c>true</c> if the method exited an array, <c>false</c> if it reached the end of the stream.</returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadPrimitiveArray``1(``0[]@)">
            <summary>
            Reads a primitive array value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.PrimitiveArray"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)"/>.</typeparam>
            <param name="array">The resulting primitive array.</param>
            <returns><c>true</c> if reading a primitive array succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.PeekEntry(System.String@)">
            <summary>
            Peeks ahead and returns the type of the next entry in the stream.
            </summary>
            <param name="name">The name of the next entry, if it has one.</param>
            <returns>The type of the next entry.</returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadInternalReference(System.Int32@)">
            <summary>
            Reads an internal reference id. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.InternalReference"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="id">The internal reference id.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadExternalReference(System.Int32@)">
            <summary>
            Reads an external reference index. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByIndex"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="index">The external reference index.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadExternalReference(System.Guid@)">
            <summary>
            Reads an external reference guid. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByGuid"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="guid">The external reference guid.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadExternalReference(System.String@)">
            <summary>
            Reads an external reference string. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByString"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="id">The external reference string.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadChar(System.Char@)">
            <summary>
            Reads a <see cref="T:System.Char"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.String"/>.
            <para />
            If the string of the entry is longer than 1 character, the first character of the string will be taken as the result.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadString(System.String@)">
            <summary>
            Reads a <see cref="T:System.String"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.String"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadGuid(System.Guid@)">
            <summary>
            Reads a <see cref="T:System.Guid"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Guid"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadSByte(System.SByte@)">
            <summary>
            Reads an <see cref="T:System.SByte"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.SByte.MinValue"/> or larger than <see cref="F:System.SByte.MaxValue"/>, the result will be default(<see cref="T:System.SByte"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadInt16(System.Int16@)">
            <summary>
            Reads a <see cref="T:System.Int16"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int16.MinValue"/> or larger than <see cref="F:System.Int16.MaxValue"/>, the result will be default(<see cref="T:System.Int16"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadInt32(System.Int32@)">
            <summary>
            Reads an <see cref="T:System.Int32"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int32.MinValue"/> or larger than <see cref="F:System.Int32.MaxValue"/>, the result will be default(<see cref="T:System.Int32"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadInt64(System.Int64@)">
            <summary>
            Reads a <see cref="T:System.Int64"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int64.MinValue"/> or larger than <see cref="F:System.Int64.MaxValue"/>, the result will be default(<see cref="T:System.Int64"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadByte(System.Byte@)">
            <summary>
            Reads a <see cref="T:System.Byte"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Byte.MinValue"/> or larger than <see cref="F:System.Byte.MaxValue"/>, the result will be default(<see cref="T:System.Byte"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadUInt16(System.UInt16@)">
            <summary>
            Reads an <see cref="T:System.UInt16"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt16.MinValue"/> or larger than <see cref="F:System.UInt16.MaxValue"/>, the result will be default(<see cref="T:System.UInt16"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadUInt32(System.UInt32@)">
            <summary>
            Reads an <see cref="T:System.UInt32"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt32.MinValue"/> or larger than <see cref="F:System.UInt32.MaxValue"/>, the result will be default(<see cref="T:System.UInt32"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadUInt64(System.UInt64@)">
            <summary>
            Reads an <see cref="T:System.UInt64"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt64.MinValue"/> or larger than <see cref="F:System.UInt64.MaxValue"/>, the result will be default(<see cref="T:System.UInt64"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadDecimal(System.Decimal@)">
            <summary>
            Reads a <see cref="T:System.Decimal"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint"/> or an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Decimal.MinValue"/> or larger than <see cref="F:System.Decimal.MaxValue"/>, the result will be default(<see cref="T:System.Decimal"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadSingle(System.Single@)">
            <summary>
            Reads a <see cref="T:System.Single"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint"/> or an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Single.MinValue"/> or larger than <see cref="F:System.Single.MaxValue"/>, the result will be default(<see cref="T:System.Single"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadDouble(System.Double@)">
            <summary>
            Reads a <see cref="T:System.Double"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint"/> or an <see cref="F:Sirenix.Serialization.EntryType.Integer"/>.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Double.MinValue"/> or larger than <see cref="F:System.Double.MaxValue"/>, the result will be default(<see cref="T:System.Double"/>).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadBoolean(System.Boolean@)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Boolean"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.ReadNull">
            <summary>
            Reads a <c>null</c> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Null"/>.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>.
            </summary>
            <returns><c>true</c> if reading the value succeeded, otherwise <c>false</c></returns>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.SkipEntry">
            <summary>
            Skips the next entry value, unless it is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray"/>. If the next entry value is an <see cref="F:Sirenix.Serialization.EntryType.StartOfNode"/> or an <see cref="F:Sirenix.Serialization.EntryType.StartOfArray"/>, all of its contents will be processed, deserialized and registered in the deserialization context, so that internal reference values are not lost to entries further down the stream.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.IDataReader.PrepareNewSerializationSession">
            <summary>
            Tells the reader that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions.
            This method is only relevant when the same reader is used to deserialize several different, unrelated values.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.IDataWriter">
            <summary>
            Provides a set of methods for reading data stored in a format that can be read by a corresponding <see cref="T:Sirenix.Serialization.IDataReader"/> class.
            <para />
            If you implement this interface, it is VERY IMPORTANT that you implement each method to the *exact* specifications the documentation specifies.
            <para />
            It is strongly recommended to inherit from the <see cref="T:Sirenix.Serialization.BaseDataWriter"/> class if you wish to implement a new data writer.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Sirenix.Serialization.IDataWriter.Binder">
            <summary>
            Gets or sets the reader's serialization binder.
            </summary>
            <value>
            The reader's serialization binder.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataWriter.Stream">
            <summary>
            Gets or sets the base stream of the writer.
            </summary>
            <value>
            The base stream of the writer.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataWriter.IsInArrayNode">
            <summary>
            Gets a value indicating whether the writer is in an array node.
            </summary>
            <value>
            <c>true</c> if the writer is in an array node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.IDataWriter.Context">
            <summary>
            Gets the serialization context.
            </summary>
            <value>
            The serialization context.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.FlushToStream">
            <summary>
            Flushes everything that has been written so far to the writer's base stream.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.BeginReferenceNode(System.String,System.Type,System.Int32)">
            <summary>
            Writes the beginning of a reference node.
            <para />
            This call MUST eventually be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)"/>, with the same name.
            </summary>
            <param name="name">The name of the reference node.</param>
            <param name="type">The type of the reference node. If null, no type metadata will be written.</param>
            <param name="id">The id of the reference node. This id is acquired by calling <see cref="M:Sirenix.Serialization.SerializationContext.TryRegisterInternalReference(System.Object,System.Int32@)"/>.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.BeginStructNode(System.String,System.Type)">
            <summary>
            Begins a struct/value type node. This is essentially the same as a reference node, except it has no internal reference id.
            <para />
            This call MUST eventually be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)"/>, with the same name.
            </summary>
            <param name="name">The name of the struct node.</param>
            <param name="type">The type of the struct node. If null, no type metadata will be written.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)">
            <summary>
            Ends the current node with the given name. If the current node has another name, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <param name="name">The name of the node to end. This has to be the name of the current node.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.BeginArrayNode(System.Int64)">
            <summary>
            Begins an array node of the given length.
            </summary>
            <param name="length">The length of the array to come.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.EndArrayNode">
            <summary>
            Ends the current array node, if the current node is an array node.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WritePrimitiveArray``1(``0[])">
            <summary>
            Writes a primitive array to the stream.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)"/>.</typeparam>
            <param name="array">The primitive array to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteNull(System.String)">
            <summary>
            Writes a null value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteInternalReference(System.String,System.Int32)">
            <summary>
            Writes an internal reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="id">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteExternalReference(System.String,System.Int32)">
            <summary>
            Writes an external index reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="index">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteExternalReference(System.String,System.Guid)">
            <summary>
            Writes an external guid reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="guid">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteExternalReference(System.String,System.String)">
            <summary>
            Writes an external string reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="id">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteChar(System.String,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteString(System.String,System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteGuid(System.String,System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteSByte(System.String,System.SByte)">
            <summary>
            Writes an <see cref="T:System.SByte"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteInt16(System.String,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteInt32(System.String,System.Int32)">
            <summary>
            Writes an <see cref="T:System.Int32"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteInt64(System.String,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteByte(System.String,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteUInt16(System.String,System.UInt16)">
            <summary>
            Writes an <see cref="T:System.UInt16"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteUInt32(System.String,System.UInt32)">
            <summary>
            Writes an <see cref="T:System.UInt32"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteUInt64(System.String,System.UInt64)">
            <summary>
            Writes an <see cref="T:System.UInt64"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteDecimal(System.String,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteSingle(System.String,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteDouble(System.String,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDataWriter.PrepareNewSerializationSession">
            <summary>
            Tells the writer that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions.
            This method is only relevant when the same writer is used to serialize several different, unrelated values.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.JsonConfig">
            <summary>
            Contains various string constants used by the <see cref="T:Sirenix.Serialization.JsonDataWriter"/>, <see cref="T:Sirenix.Serialization.JsonDataReader"/> and <see cref="T:Sirenix.Serialization.JsonTextReader"/> classes.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.ID_SIG">
            <summary>
            The named of a node id entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.TYPE_SIG">
            <summary>
            The name of a type entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.REGULAR_ARRAY_LENGTH_SIG">
            <summary>
            The name of a regular array length entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.PRIMITIVE_ARRAY_LENGTH_SIG">
            <summary>
            The name of a primitive array length entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.REGULAR_ARRAY_CONTENT_SIG">
            <summary>
            The name of a regular array content entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.PRIMITIVE_ARRAY_CONTENT_SIG">
            <summary>
            The name of a primitive array content entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.INTERNAL_REF_SIG">
            <summary>
            The beginning of the content of an internal reference entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.EXTERNAL_INDEX_REF_SIG">
            <summary>
            The beginning of the content of an external reference by index entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.EXTERNAL_GUID_REF_SIG">
            <summary>
            The beginning of the content of an external reference by guid entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.JsonConfig.EXTERNAL_STRING_REF_SIG">
            <summary>
            The beginning of the content of an external reference by string entry.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.JsonDataReader">
            <summary>
            Reads json data from a stream that has been written by a <see cref="T:Sirenix.Serialization.JsonDataWriter"/>.
            </summary>
            <seealso cref="T:Sirenix.Serialization.BaseDataReader" />
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.#ctor(System.IO.Stream,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.JsonDataReader" /> class.
            </summary>
            <param name="stream">The base stream of the reader.</param>
            <param name="context">The deserialization context to use.</param>
        </member>
        <member name="P:Sirenix.Serialization.JsonDataReader.Stream">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.Dispose">
            <summary>
            Disposes all resources and streams kept by the data reader.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.PeekEntry(System.String@)">
            <summary>
            Peeks ahead and returns the type of the next entry in the stream.
            </summary>
            <param name="name">The name of the next entry, if it has one.</param>
            <returns>
            The type of the next entry.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.EnterNode(System.Type@)">
            <summary>
            Tries to enter a node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfNode" />.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="!:IDataReader.ExitNode(DeserializationContext)" /><para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> properties to the correct values for the current node.
            </summary>
            <param name="type">The type of the node. This value will be null if there was no metadata, or if the reader's serialization binder failed to resolve the type name.</param>
            <returns>
              <c>true</c> if entering a node succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ExitNode">
            <summary>
            Exits the current node. This method will keep skipping entries using <see cref="!:IDataReader.SkipEntry(DeserializationContext)" /> until an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> is reached, or the end of the stream is reached.
            <para />
            This call MUST have been preceded by a corresponding call to <see cref="M:Sirenix.Serialization.IDataReader.EnterNode(System.Type@)" />.
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> to the correct values for the node that was prior to the current node.
            </summary>
            <returns>
              <c>true</c> if the method exited a node, <c>false</c> if it reached the end of the stream.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.EnterArray(System.Int64@)">
            <summary>
            Tries to enters an array node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfArray" />.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="!:IDataReader.ExitArray(DeserializationContext)" /><para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> properties to the correct values for the current array node.
            </summary>
            <param name="length">The length of the array that was entered.</param>
            <returns>
              <c>true</c> if an array was entered, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ExitArray">
            <summary>
            Exits the closest array. This method will keep skipping entries using <see cref="!:IDataReader.SkipEntry(DeserializationContext)" /> until an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" /> is reached, or the end of the stream is reached.
            <para />
            This call MUST have been preceded by a corresponding call to <see cref="!:IDataReader.EnterArray(out long)(out Type)" />.
            <para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> to the correct values for the node that was prior to the exited array node.
            </summary>
            <returns>
              <c>true</c> if the method exited an array, <c>false</c> if it reached the end of the stream.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadPrimitiveArray``1(``0[]@)">
            <summary>
            Reads a primitive array value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.PrimitiveArray" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)" />.</typeparam>
            <param name="array">The resulting primitive array.</param>
            <returns>
              <c>true</c> if reading a primitive array succeeded, otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentException">Type  + typeof(T).Name +  is not a valid primitive array type.</exception>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadBoolean(System.Boolean@)">
            <summary>
            Reads a <see cref="T:System.Boolean" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Boolean" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadInternalReference(System.Int32@)">
            <summary>
            Reads an internal reference id. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.InternalReference" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="id">The internal reference id.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadExternalReference(System.Int32@)">
            <summary>
            Reads an external reference index. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByIndex" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="index">The external reference index.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadExternalReference(System.Guid@)">
            <summary>
            Reads an external reference guid. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByGuid" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="guid">The external reference guid.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadExternalReference(System.String@)">
            <summary>
            Reads an external reference string. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.ExternalReferenceByString" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="id">The external reference string.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadChar(System.Char@)">
            <summary>
            Reads a <see cref="T:System.Char" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.String" />.
            <para />
            If the string of the entry is longer than 1 character, the first character of the string will be taken as the result.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadString(System.String@)">
            <summary>
            Reads a <see cref="T:System.String" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.String" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadGuid(System.Guid@)">
            <summary>
            Reads a <see cref="T:System.Guid" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Guid" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadSByte(System.SByte@)">
            <summary>
            Reads an <see cref="T:System.SByte" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.SByte.MinValue" /> or larger than <see cref="F:System.SByte.MaxValue" />, the result will be default(<see cref="T:System.SByte" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadInt16(System.Int16@)">
            <summary>
            Reads a <see cref="T:System.Int16" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int16.MinValue" /> or larger than <see cref="F:System.Int16.MaxValue" />, the result will be default(<see cref="T:System.Int16" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadInt32(System.Int32@)">
            <summary>
            Reads an <see cref="T:System.Int32" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int32.MinValue" /> or larger than <see cref="F:System.Int32.MaxValue" />, the result will be default(<see cref="T:System.Int32" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadInt64(System.Int64@)">
            <summary>
            Reads a <see cref="T:System.Int64" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Int64.MinValue" /> or larger than <see cref="F:System.Int64.MaxValue" />, the result will be default(<see cref="T:System.Int64" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadByte(System.Byte@)">
            <summary>
            Reads a <see cref="T:System.Byte" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.Byte.MinValue" /> or larger than <see cref="F:System.Byte.MaxValue" />, the result will be default(<see cref="T:System.Byte" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadUInt16(System.UInt16@)">
            <summary>
            Reads an <see cref="T:System.UInt16" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt16.MinValue" /> or larger than <see cref="F:System.UInt16.MaxValue" />, the result will be default(<see cref="T:System.UInt16" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadUInt32(System.UInt32@)">
            <summary>
            Reads an <see cref="T:System.UInt32" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt32.MinValue" /> or larger than <see cref="F:System.UInt32.MaxValue" />, the result will be default(<see cref="T:System.UInt32" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadUInt64(System.UInt64@)">
            <summary>
            Reads an <see cref="T:System.UInt64" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the value of the stored integer is smaller than <see cref="F:System.UInt64.MinValue" /> or larger than <see cref="F:System.UInt64.MaxValue" />, the result will be default(<see cref="T:System.UInt64" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadDecimal(System.Decimal@)">
            <summary>
            Reads a <see cref="T:System.Decimal" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint" /> or an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Decimal.MinValue" /> or larger than <see cref="F:System.Decimal.MaxValue" />, the result will be default(<see cref="T:System.Decimal" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadSingle(System.Single@)">
            <summary>
            Reads a <see cref="T:System.Single" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint" /> or an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Single.MinValue" /> or larger than <see cref="F:System.Single.MaxValue" />, the result will be default(<see cref="T:System.Single" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadDouble(System.Double@)">
            <summary>
            Reads a <see cref="T:System.Double" /> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.FloatingPoint" /> or an <see cref="F:Sirenix.Serialization.EntryType.Integer" />.
            <para />
            If the stored integer or floating point value is smaller than <see cref="F:System.Double.MinValue" /> or larger than <see cref="F:System.Double.MaxValue" />, the result will be default(<see cref="T:System.Double" />).
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <param name="value">The value that has been read.</param>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadNull">
            <summary>
            Reads a <c>null</c> value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.Null" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <returns>
              <c>true</c> if reading the value succeeded, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.PrepareNewSerializationSession">
            <summary>
            Tells the reader that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions.
            This method is only relevant when the same reader is used to deserialize several different, unrelated values.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.PeekEntry">
            <summary>
            Peeks the current entry.
            </summary>
            <returns>The peeked entry.</returns>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataReader.ReadToNextEntry">
            <summary>
            Consumes the current entry, and reads to the next one.
            </summary>
            <returns>The next entry.</returns>
        </member>
        <member name="T:Sirenix.Serialization.JsonDataWriter">
            <summary>
            Writes json data to a stream that can be read by a <see cref="T:Sirenix.Serialization.JsonDataReader"/>.
            </summary>
            <seealso cref="T:Sirenix.Serialization.BaseDataWriter" />
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.#ctor(System.IO.Stream,Sirenix.Serialization.SerializationContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.JsonDataWriter" /> class.
            </summary>
            <param name="stream">The base stream of the writer.</param>
            <param name="context">The serialization context to use.</param>>
            <param name="formatAsReadable">Whether the json should be packed, or formatted as human-readable.</param>
        </member>
        <member name="P:Sirenix.Serialization.JsonDataWriter.FormatAsReadable">
            <summary>
            Gets or sets a value indicating whether the json should be packed, or formatted as human-readable.
            </summary>
            <value>
              <c>true</c> if the json should be formatted as human-readable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.JsonDataWriter.EnableTypeOptimization">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.JsonDataWriter.Stream">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.MarkJustStarted">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.FlushToStream">
            <summary>
            Flushes everything that has been written so far to the writer's base stream.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.BeginReferenceNode(System.String,System.Type,System.Int32)">
            <summary>
            Writes the beginning of a reference node.
            <para />
            This call MUST eventually be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)" />, with the same name.
            </summary>
            <param name="name">The name of the reference node.</param>
            <param name="type">The type of the reference node. If null, no type metadata will be written.</param>
            <param name="id">The id of the reference node. This id is acquired by calling <see cref="M:Sirenix.Serialization.SerializationContext.TryRegisterInternalReference(System.Object,System.Int32@)" />.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.BeginStructNode(System.String,System.Type)">
            <summary>
            Begins a struct/value type node. This is essentially the same as a reference node, except it has no internal reference id.
            <para />
            This call MUST eventually be followed by a corresponding call to <see cref="M:Sirenix.Serialization.IDataWriter.EndNode(System.String)" />, with the same name.
            </summary>
            <param name="name">The name of the struct node.</param>
            <param name="type">The type of the struct node. If null, no type metadata will be written.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.EndNode(System.String)">
            <summary>
            Ends the current node with the given name. If the current node has another name, an <see cref="T:System.InvalidOperationException" /> is thrown.
            </summary>
            <param name="name">The name of the node to end. This has to be the name of the current node.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.BeginArrayNode(System.Int64)">
            <summary>
            Begins an array node of the given length.
            </summary>
            <param name="length">The length of the array to come.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.EndArrayNode">
            <summary>
            Ends the current array node, if the current node is an array node.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WritePrimitiveArray``1(``0[])">
            <summary>
            Writes a primitive array to the stream.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)" />.</typeparam>
            <param name="array">The primitive array to write.</param>
            <exception cref="T:System.ArgumentException">Type  + typeof(T).Name +  is not a valid primitive array type.</exception>
            <exception cref="T:System.ArgumentNullException">array</exception>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteByte(System.String,System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteChar(System.String,System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteDecimal(System.String,System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteDouble(System.String,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteInt32(System.String,System.Int32)">
            <summary>
            Writes an <see cref="T:System.Int32" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteInt64(System.String,System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteNull(System.String)">
            <summary>
            Writes a null value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteInternalReference(System.String,System.Int32)">
            <summary>
            Writes an internal reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="id">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteSByte(System.String,System.SByte)">
            <summary>
            Writes an <see cref="T:System.SByte" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteInt16(System.String,System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteSingle(System.String,System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteString(System.String,System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteGuid(System.String,System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteUInt32(System.String,System.UInt32)">
            <summary>
            Writes an <see cref="T:System.UInt32" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteUInt64(System.String,System.UInt64)">
            <summary>
            Writes an <see cref="T:System.UInt64" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteExternalReference(System.String,System.Int32)">
            <summary>
            Writes an external index reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="index">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteExternalReference(System.String,System.Guid)">
            <summary>
            Writes an external guid reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="guid">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteExternalReference(System.String,System.String)">
            <summary>
            Writes an external string reference to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="id">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.WriteUInt16(System.String,System.UInt16)">
            <summary>
            Writes an <see cref="T:System.UInt16" /> value to the stream.
            </summary>
            <param name="name">The name of the value. If this is null, no name will be written.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.Dispose">
            <summary>
            Disposes all resources and streams kept by the data writer.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonDataWriter.PrepareNewSerializationSession">
            <summary>
            Tells the writer that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions.
            This method is only relevant when the same writer is used to serialize several different, unrelated values.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.JsonTextReader">
            <summary>
            Parses json entries from a stream.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Sirenix.Serialization.JsonTextReader.Context">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonTextReader.#ctor(System.IO.Stream,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.JsonTextReader" /> class.
            </summary>
            <param name="stream">The stream to parse from.</param>
            <param name="context">The deserialization context to use.</param>
            <exception cref="T:System.ArgumentNullException">The stream is null.</exception>
            <exception cref="T:System.ArgumentException">Cannot read from the stream.</exception>
        </member>
        <member name="M:Sirenix.Serialization.JsonTextReader.Reset">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonTextReader.Dispose">
            <summary>
            Dispose any disposable resources that the <see cref="T:Sirenix.Serialization.JsonTextReader"/> possesses.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.JsonTextReader.ReadToNextEntry(System.String@,System.String@,Sirenix.Serialization.EntryType@)">
            <summary>
            Reads to (but not past) the beginning of the next json entry, and returns the entry name, contents and type.
            </summary>
            <param name="name">The name of the entry that was parsed.</param>
            <param name="valueContent">The content of the entry that was parsed.</param>
            <param name="entry">The type of the entry that was parsed.</param>
        </member>
        <member name="T:Sirenix.Serialization.SerializationNode">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationNode.Name">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationNode.Entry">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationNode.Data">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.SerializationNodeDataReader">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.#ctor(Sirenix.Serialization.DeserializationContext)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationNodeDataReader.Nodes">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationNodeDataReader.Stream">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.Dispose">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.PrepareNewSerializationSession">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.PeekEntry(System.String@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.EnterArray(System.Int64@)">
            <summary>
            Tries to enters an array node. This will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.StartOfArray" />.
            <para />
            This call MUST (eventually) be followed by a corresponding call to <see cref="!:IDataReader.ExitArray(DeserializationContext)" /><para />
            This call will change the values of the <see cref="P:Sirenix.Serialization.IDataReader.IsInArrayNode" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeName" />, <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeId" /> and <see cref="P:Sirenix.Serialization.IDataReader.CurrentNodeDepth" /> properties to the correct values for the current array node.
            </summary>
            <param name="length">The length of the array that was entered.</param>
            <returns>
              <c>true</c> if an array was entered, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.EnterNode(System.Type@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ExitArray">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ExitNode">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadBoolean(System.Boolean@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadByte(System.Byte@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadChar(System.Char@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadDecimal(System.Decimal@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadDouble(System.Double@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadExternalReference(System.Guid@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadExternalReference(System.String@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadExternalReference(System.Int32@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadGuid(System.Guid@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadInt16(System.Int16@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadInt32(System.Int32@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadInt64(System.Int64@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadInternalReference(System.Int32@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadNull">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadPrimitiveArray``1(``0[]@)">
            <summary>
            Reads a primitive array value. This call will succeed if the next entry is an <see cref="F:Sirenix.Serialization.EntryType.PrimitiveArray" />.
            <para />
            If the call fails (and returns <c>false</c>), it will skip the current entry value, unless that entry is an <see cref="F:Sirenix.Serialization.EntryType.EndOfNode" /> or an <see cref="F:Sirenix.Serialization.EntryType.EndOfArray" />.
            </summary>
            <typeparam name="T">The element type of the primitive array. Valid element types can be determined using <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)" />.</typeparam>
            <param name="array">The resulting primitive array.</param>
            <returns>
              <c>true</c> if reading a primitive array succeeded, otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentException">Type  + typeof(T).Name +  is not a valid primitive array type.</exception>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadSByte(System.SByte@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadSingle(System.Single@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadString(System.String@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadUInt16(System.UInt16@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadUInt32(System.UInt32@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadUInt64(System.UInt64@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.PeekEntry">
            <summary>
            Peeks the current entry.
            </summary>
            <returns>The peeked entry.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataReader.ReadToNextEntry">
            <summary>
            Consumes the current entry, and reads to the next one.
            </summary>
            <returns>The next entry.</returns>
        </member>
        <member name="T:Sirenix.Serialization.SerializationNodeDataReaderWriterConfig">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationNodeDataReaderWriterConfig.NodeIdSeparator">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.SerializationNodeDataWriter">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationNodeDataWriter.Nodes">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.#ctor(Sirenix.Serialization.SerializationContext)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationNodeDataWriter.Stream">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.BeginArrayNode(System.Int64)">
            <summary>
            Begins an array node of the given length.
            </summary>
            <param name="length">The length of the array to come.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.BeginReferenceNode(System.String,System.Type,System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.BeginStructNode(System.String,System.Type)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.Dispose">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.EndArrayNode">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.EndNode(System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.PrepareNewSerializationSession">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteByte(System.String,System.Byte)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteChar(System.String,System.Char)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteDecimal(System.String,System.Decimal)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteSingle(System.String,System.Single)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteDouble(System.String,System.Double)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteExternalReference(System.String,System.Guid)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteExternalReference(System.String,System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteExternalReference(System.String,System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteGuid(System.String,System.Guid)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteInt16(System.String,System.Int16)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteInt32(System.String,System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteInt64(System.String,System.Int64)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteInternalReference(System.String,System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteNull(System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WritePrimitiveArray``1(``0[])">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteSByte(System.String,System.SByte)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteString(System.String,System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteUInt16(System.String,System.UInt16)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteUInt32(System.String,System.UInt32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.WriteUInt64(System.String,System.UInt64)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationNodeDataWriter.FlushToStream">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.ArrayFormatter`1">
            <summary>
            Formatter for all non-primitive one-dimensional arrays.
            </summary>
            <typeparam name="T">The element type of the formatted array.</typeparam>
            <seealso cref="!:Sirenix.Serialization.BaseFormatter&lt;T[]&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.ArrayFormatter`1.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>
            A null value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.ArrayFormatter`1.DeserializeImplementation(`0[]@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.ArrayFormatter`1.SerializeImplementation(`0[]@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.ArrayListFormatter">
            <summary>
            Custom formatter for the type <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <seealso cref="!:Sirenix.Serialization.BaseFormatter&lt;System.Collections.Generic.List&lt;T&gt;&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.ArrayListFormatter.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>
            A null value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.ArrayListFormatter.DeserializeImplementation(System.Collections.ArrayList@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.ArrayListFormatter.SerializeImplementation(System.Collections.ArrayList@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.BaseFormatter`1">
            <summary>
            Provides common functionality for serializing and deserializing values of type <see cref="!:T"/>, and provides automatic support for the following common serialization conventions:
            <para />
            <see cref="T:System.Runtime.Serialization.IObjectReference"/>, <see cref="!:ISerializationCallbackReceiver"/>, <see cref="T:System.Runtime.Serialization.OnSerializingAttribute"/>, <see cref="T:System.Runtime.Serialization.OnSerializedAttribute"/>, <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute"/> and <see cref="T:System.Runtime.Serialization.OnDeserializedAttribute"/>.
            </summary>
            <typeparam name="T">The type which can be serialized and deserialized by the formatter.</typeparam>
            <seealso cref="T:Sirenix.Serialization.IFormatter`1" />
        </member>
        <member name="F:Sirenix.Serialization.BaseFormatter`1.OnSerializingCallbacks">
            <summary>
            The on serializing callbacks for type <see cref="!:T"/>.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BaseFormatter`1.OnSerializedCallbacks">
            <summary>
            The on serialized callbacks for type <see cref="!:T"/>.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BaseFormatter`1.OnDeserializingCallbacks">
            <summary>
            The on deserializing callbacks for type <see cref="!:T"/>.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BaseFormatter`1.OnDeserializedCallbacks">
            <summary>
            The on deserialized callbacks for type <see cref="!:T"/>.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.BaseFormatter`1.IsValueType">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.BaseFormatter`1.SerializedType">
            <summary>
            Gets the type that the formatter can serialize.
            </summary>
            <value>
            The type that the formatter can serialize.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.Sirenix#Serialization#IFormatter#Serialize(System.Object,Sirenix.Serialization.IDataWriter)">
            <summary>
            Serializes a value using a specified <see cref="T:Sirenix.Serialization.IDataWriter" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.Sirenix#Serialization#IFormatter#Deserialize(Sirenix.Serialization.IDataReader)">
            <summary>
            Deserializes a value using a specified <see cref="T:Sirenix.Serialization.IDataReader" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.Deserialize(Sirenix.Serialization.IDataReader)">
            <summary>
            Deserializes a value of type <see cref="!:T" /> using a specified <see cref="T:Sirenix.Serialization.IDataReader" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.Serialize(`0,Sirenix.Serialization.IDataWriter)">
            <summary>
            Serializes a value of type <see cref="!:T" /> using a specified <see cref="T:Sirenix.Serialization.IDataWriter" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject">
            <summary>
            Get an uninitialized object of type <see cref="!:T"/>. WARNING: If you override this and return null, the object's ID will not be automatically registered and its OnDeserializing callbacks will not be automatically called, before deserialization begins.
            You will have to call <see cref="M:Sirenix.Serialization.BaseFormatter`1.RegisterReferenceID(`0,Sirenix.Serialization.IDataReader)"/> and <see cref="M:Sirenix.Serialization.BaseFormatter`1.InvokeOnDeserializingCallbacks(`0,Sirenix.Serialization.DeserializationContext)"/> immediately after creating the object yourself during deserialization.
            </summary>
            <returns>An uninitialized object of type <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.RegisterReferenceID(`0,Sirenix.Serialization.IDataReader)">
            <summary>
            Registers the given object reference in the deserialization context.
            <para />
            NOTE that this method only does anything if <see cref="!:T"/> is not a value type.
            </summary>
            <param name="value">The value to register.</param>
            <param name="reader">The reader which is currently being used.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.InvokeOnDeserializingCallbacks(`0,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Invokes all methods on the object with the [OnDeserialized] attribute.
            <para />
            WARNING: This method will not be called automatically if you override GetUninitializedObject and return null! You will have to call it manually after having created the object instance during deserialization.
            </summary>
            <param name="value">The value to invoke the callbacks on.</param>
            <param name="context">The deserialization context.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.DeserializeImplementation(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.BaseFormatter`1.SerializeImplementation(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.DateTimeFormatter">
            <summary>
            Custom formatter for the <see cref="T:System.DateTime"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;System.DateTime&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.DateTimeFormatter.Read(System.DateTime@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.DateTimeFormatter.Write(System.DateTime@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.DateTimeOffsetFormatter">
            <summary>
            Custom formatter for the <see cref="T:System.DateTimeOffset"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;System.DateTimeOffset&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.DateTimeOffsetFormatter.Read(System.DateTimeOffset@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.DateTimeOffsetFormatter.Write(System.DateTimeOffset@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.DelegateFormatter`1">
            <summary>
            Formatter for all delegate types.
            <para />
            This formatter can handle anything but delegates for dynamic methods.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Sirenix.Serialization.BaseFormatter`1" />
        </member>
        <member name="M:Sirenix.Serialization.DelegateFormatter`1.DeserializeImplementation(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.DelegateFormatter`1.SerializeImplementation(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.DelegateFormatter`1.GetUninitializedObject">
            <summary>
            Get an uninitialized object of type <see cref="!:T" />. WARNING: If you override this and return null, the object's ID will not be automatically registered and its OnDeserializing callbacks will not be automatically called, before deserialization begins.
            You will have to call <see cref="M:Sirenix.Serialization.BaseFormatter`1.RegisterReferenceID(`0,Sirenix.Serialization.IDataReader)" /> and <see cref="M:Sirenix.Serialization.BaseFormatter`1.InvokeOnDeserializingCallbacks(`0,Sirenix.Serialization.DeserializationContext)" /> immediately after creating the object yourself during deserialization.
            </summary>
            <returns>
            An uninitialized object of type <see cref="!:T" />.
            </returns>
        </member>
        <member name="T:Sirenix.Serialization.DictionaryFormatter`2">
            <summary>
            Custom generic formatter for the generic type definition <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
            <seealso cref="!:Sirenix.Serialization.BaseFormatter&lt;System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.DictionaryFormatter`2.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>
            A value of null.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.DictionaryFormatter`2.DeserializeImplementation(System.Collections.Generic.Dictionary{`0,`1}@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.DictionaryFormatter`2.SerializeImplementation(System.Collections.Generic.Dictionary{`0,`1}@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.Formatters.DoubleLookupDictionaryFormatter`3.SerializeImplementation(Sirenix.Utilities.DoubleLookupDictionary{`0,`1,`2}@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.Formatters.DoubleLookupDictionaryFormatter`3.DeserializeImplementation(Sirenix.Utilities.DoubleLookupDictionary{`0,`1,`2}@,Sirenix.Serialization.IDataReader)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.EasyBaseFormatter`1">
            <summary>
            Provides an easy way of implementing custom formatters.
            </summary>
            <typeparam name="T">The type which can be serialized and deserialized by the formatter.</typeparam>
        </member>
        <member name="M:Sirenix.Serialization.EasyBaseFormatter`1.DeserializeImplementation(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads through all entries in the current node one at a time, and calls <see cref="!:EasyBaseFormatter&lt;T&gt;.ReadDataEntry(ref T, string, EntryType, IDataReader, DeserializationContext)" /> for each entry.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.EasyBaseFormatter`1.SerializeImplementation(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Calls <see cref="M:Sirenix.Serialization.EasyBaseFormatter`1.WriteDataEntries(`0@,Sirenix.Serialization.IDataWriter)" /> directly.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.EasyBaseFormatter`1.ReadDataEntry(`0@,System.String,Sirenix.Serialization.EntryType,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a data entry into the value denoted by the entry name.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="entryName">The name of the entry.</param>
            <param name="entryType">The type of the entry.</param>
            <param name="reader">The reader currently used for deserialization.</param>
        </member>
        <member name="M:Sirenix.Serialization.EasyBaseFormatter`1.WriteDataEntries(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Write the serialized values of a value of type <see cref="!:t" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer currently used for serialization.</param>
        </member>
        <member name="T:Sirenix.Serialization.EmittedFormatterAttribute">
            <summary>
            Indicates that this formatter type has been emitted. Never put this on a type!
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.EmptyTypeFormatter`1">
            <summary>
            A formatter for empty types. It writes no data, and skips all data that is to be read, deserializing a "default" value.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.FormatterEmitter">
            <summary>
            Utility class for emitting formatters using the <see cref="N:System.Reflection.Emit"/> namespace.
            <para />
            NOTE: Some platforms do not support emitting. Check whether you can emit on the current platform using <see cref="P:Sirenix.Utilities.EmitUtilities.CanEmit"/>.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.FormatterEmitter.PRE_EMITTED_ASSEMBLY_NAME">
            <summary>
            The name of the pre-generated assembly that contains pre-emitted formatters for use on AOT platforms where emitting is not supported. Note that this assembly is not always present.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.FormatterEmitter.RUNTIME_EMITTED_ASSEMBLY_NAME">
            <summary>
            The name of the runtime-generated assembly that contains runtime-emitted formatters for use on non-AOT platforms where emitting is supported. Note that this assembly is not always present.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.FormatterEmitter.AOTEmittedFormatter`1">
            <summary>
            Base type for all AOT-emitted formatters.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.FormatterEmitter.EmptyAOTEmittedFormatter`1">
            <summary>
            Shortcut class that makes it easier to emit empty AOT formatters.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.FormatterEmitter.GetEmittedFormatter(System.Type,Sirenix.Serialization.ISerializationPolicy)">
            <summary>
            Gets an emitted formatter for a given type.
            <para />
            NOTE: Some platforms do not support emitting. On such platforms, this method logs an error and returns null. Check whether you can emit on the current platform using <see cref="P:Sirenix.Utilities.EmitUtilities.CanEmit"/>.
            </summary>
            <param name="type">The type to emit a formatter for.</param>
            <param name="policy">The serialization policy to use to determine which members the emitted formatter should serialize. If null, <see cref="P:Sirenix.Serialization.SerializationPolicies.Strict"/> is used.</param>
            <returns>The type of the emitted formatter.</returns>
            <exception cref="T:System.ArgumentNullException">The type argument is null.</exception>
        </member>
        <member name="M:Sirenix.Serialization.FormatterEmitter.EmitAOTFormatter(System.Type,System.Reflection.Emit.ModuleBuilder,Sirenix.Serialization.ISerializationPolicy)">
            <summary>
            Emits a formatter for a given type into a given module builder, using a given serialization policy to determine which members to serialize.
            </summary>
            <param name="formattedType">Type to create a formatter for.</param>
            <param name="moduleBuilder">The module builder to emit a formatter into.</param>
            <param name="policy">The serialization policy to use for creating the formatter.</param>
            <returns>The fully constructed, emitted formatter type.</returns>
        </member>
        <member name="T:Sirenix.Serialization.GenericCollectionFormatter">
            <summary>
            Utility class for the <see cref="T:Sirenix.Serialization.GenericCollectionFormatter`2"/> class.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.GenericCollectionFormatter.CanFormat(System.Type,System.Type@)">
            <summary>
            Determines whether the specified type can be formatted by a <see cref="T:Sirenix.Serialization.GenericCollectionFormatter`2"/>.
            <para />
            The following criteria are checked: type implements <see cref="T:System.Collections.Generic.ICollection`1"/>, type is not abstract, type is not a generic type definition, type is not an interface, type has a public parameterless constructor.
            </summary>
            <param name="type">The collection type to check.</param>
            <param name="elementType">The element type of the collection.</param>
            <returns><c>true</c> if the type can be formatted by a <see cref="T:Sirenix.Serialization.GenericCollectionFormatter`2"/>, otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">The type argument is null.</exception>
        </member>
        <member name="T:Sirenix.Serialization.GenericCollectionFormatter`2">
            <summary>
            Formatter for all eligible types that implement the interface <see cref="T:System.Collections.Generic.ICollection`1"/>, and which have no other formatters specified.
            <para />
            Eligibility for formatting by this class is determined by the <see cref="M:Sirenix.Serialization.GenericCollectionFormatter.CanFormat(System.Type,System.Type@)"/> method.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:Sirenix.Serialization.GenericCollectionFormatter`2.GetUninitializedObject">
            <summary>
            Gets a new object of type <see cref="!:T" />.
            </summary>
            <returns>
            A new object of type <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.GenericCollectionFormatter`2.DeserializeImplementation(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.GenericCollectionFormatter`2.SerializeImplementation(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.HashSetFormatter`1">
            <summary>
            Custom generic formatter for the generic type definition <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The element type of the formatted list.</typeparam>
            <seealso cref="!:Sirenix.Serialization.BaseFormatter&lt;System.Collections.Generic.HashSet&lt;T&gt;&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.HashSetFormatter`1.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>
            A null value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.HashSetFormatter`1.DeserializeImplementation(System.Collections.Generic.HashSet{`0}@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.HashSetFormatter`1.SerializeImplementation(System.Collections.Generic.HashSet{`0}@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.IFormatter">
            <summary>
            Serializes and deserializes a given type.
            <para />
            NOTE that if you are implementing a custom formatter and registering it using the <see cref="T:Sirenix.Serialization.CustomFormatterAttribute"/>, it is not enough to implement <see cref="T:Sirenix.Serialization.IFormatter"/> - you have to implement <see cref="T:Sirenix.Serialization.IFormatter`1"/>.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.IFormatter.SerializedType">
            <summary>
            Gets the type that the formatter can serialize.
            </summary>
            <value>
            The type that the formatter can serialize.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.IFormatter.Serialize(System.Object,Sirenix.Serialization.IDataWriter)">
            <summary>
            Serializes a value using a specified <see cref="T:Sirenix.Serialization.IDataWriter" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.IFormatter.Deserialize(Sirenix.Serialization.IDataReader)">
            <summary>
            Deserializes a value using a specified <see cref="T:Sirenix.Serialization.IDataReader" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="T:Sirenix.Serialization.IFormatter`1">
            <summary>
            Serializes and deserializes a given type T.
            </summary>
            <typeparam name="T">The type which can be serialized and deserialized by the formatter.</typeparam>
        </member>
        <member name="M:Sirenix.Serialization.IFormatter`1.Serialize(`0,Sirenix.Serialization.IDataWriter)">
            <summary>
            Serializes a value of type <see cref="!:T" /> using a specified <see cref="T:Sirenix.Serialization.IDataWriter" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.IFormatter`1.Deserialize(Sirenix.Serialization.IDataReader)">
            <summary>
            Deserializes a value of type <see cref="!:T" /> using a specified <see cref="T:Sirenix.Serialization.IDataReader" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.IndexedDictionaryFormatter`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.IndexedDictionaryFormatter`2.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.ListFormatter`1">
            <summary>
            Custom generic formatter for the generic type definition <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The element type of the formatted list.</typeparam>
            <seealso cref="!:Sirenix.Serialization.BaseFormatter&lt;System.Collections.Generic.List&lt;T&gt;&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.ListFormatter`1.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>
            A null value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.ListFormatter`1.DeserializeImplementation(System.Collections.Generic.List{`0}@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.ListFormatter`1.SerializeImplementation(System.Collections.Generic.List{`0}@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.MinimalBaseFormatter`1">
            <summary>
            Minimal baseline formatter. Doesn't come with all the bells and whistles of any of the other BaseFormatter classes.
            Common serialization conventions aren't automatically supported, and common deserialization callbacks are not automatically invoked.
            </summary>
            <typeparam name="T">The type which can be serialized and deserialized by the formatter.</typeparam>
        </member>
        <member name="P:Sirenix.Serialization.MinimalBaseFormatter`1.SerializedType">
            <summary>
            Gets the type that the formatter can serialize.
            </summary>
            <value>
            The type that the formatter can serialize.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.MinimalBaseFormatter`1.Deserialize(Sirenix.Serialization.IDataReader)">
            <summary>
            Deserializes a value of type <see cref="!:T" /> using a specified <see cref="T:Sirenix.Serialization.IDataReader" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.MinimalBaseFormatter`1.Serialize(`0,Sirenix.Serialization.IDataWriter)">
            <summary>
            Serializes a value of type <see cref="!:T" /> using a specified <see cref="T:Sirenix.Serialization.IDataWriter" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.MinimalBaseFormatter`1.Sirenix#Serialization#IFormatter#Serialize(System.Object,Sirenix.Serialization.IDataWriter)">
            <summary>
            Serializes a value using a specified <see cref="T:Sirenix.Serialization.IDataWriter" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.MinimalBaseFormatter`1.Sirenix#Serialization#IFormatter#Deserialize(Sirenix.Serialization.IDataReader)">
            <summary>
            Deserializes a value using a specified <see cref="T:Sirenix.Serialization.IDataReader" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.MinimalBaseFormatter`1.GetUninitializedObject">
            <summary>
            Get an uninitialized object of type <see cref="!:T"/>. WARNING: If you override this and return null, the object's ID will not be automatically registered.
            You will have to call <see cref="!:MinimalBaseFormatter&lt;T&gt;&lt;T&gt;.RegisterReferenceID(T, IDataReader, DeserializationContext)"/> immediately after creating the object yourself during deserialization.
            </summary>
            <returns>An uninitialized object of type <see cref="!:T"/>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.MinimalBaseFormatter`1.Read(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.MinimalBaseFormatter`1.Write(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.MinimalBaseFormatter`1.RegisterReferenceID(`0,Sirenix.Serialization.IDataReader)">
            <summary>
            Registers the given object reference in the deserialization context.
            <para />
            NOTE that this method only does anything if <see cref="!:T"/> is not a value type.
            </summary>
            <param name="value">The value to register.</param>
            <param name="reader">The reader which is currently being used.</param>
        </member>
        <member name="T:Sirenix.Serialization.MultiDimensionalArrayFormatter`2">
            <summary>
            Formatter for all arrays with more than one dimension.
            </summary>
            <typeparam name="TArray">The type of the formatted array.</typeparam>
            <typeparam name="TElement">The element type of the formatted array.</typeparam>
            <seealso cref="T:Sirenix.Serialization.BaseFormatter`1" />
        </member>
        <member name="M:Sirenix.Serialization.MultiDimensionalArrayFormatter`2.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>
            A null value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.MultiDimensionalArrayFormatter`2.DeserializeImplementation(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.MultiDimensionalArrayFormatter`2.SerializeImplementation(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.NullableFormatter`1">
            <summary>
            Formatter for all <see cref="T:System.Nullable`1"/> types.
            </summary>
            <typeparam name="T">The type that is nullable.</typeparam>
            <seealso cref="!:Sirenix.Serialization.BaseFormatter&lt;T?&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.NullableFormatter`1.DeserializeImplementation(System.Nullable{`0}@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.NullableFormatter`1.SerializeImplementation(System.Nullable{`0}@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.PrimitiveArrayFormatter`1">
            <summary>
            Formatter for all primitive one-dimensional arrays.
            </summary>
            <typeparam name="T">The element type of the formatted array. This type must be an eligible primitive array type, as determined by <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)"/>.</typeparam>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;T[]&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.PrimitiveArrayFormatter`1.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>
            A null value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.PrimitiveArrayFormatter`1.Read(`0[]@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.PrimitiveArrayFormatter`1.Write(`0[]@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.ReflectionFormatter`1">
            <summary>
            Final fallback formatter for all types which have no other formatters. This formatter relies on reflection to work, and is thus comparatively slow and creates more garbage than a custom formatter.
            </summary>
            <typeparam name="T">The type which can be serialized and deserialized by the formatter.</typeparam>
            <seealso cref="T:Sirenix.Serialization.BaseFormatter`1" />
        </member>
        <member name="M:Sirenix.Serialization.ReflectionFormatter`1.DeserializeImplementation(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.ReflectionFormatter`1.SerializeImplementation(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="T:Sirenix.Serialization.SelfFormatterFormatter`1">
            <summary>
            Formatter for types that implement the <see cref="T:Sirenix.Serialization.ISelfFormatter"/> interface.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Sirenix.Serialization.BaseFormatter`1" />
        </member>
        <member name="M:Sirenix.Serialization.SelfFormatterFormatter`1.DeserializeImplementation(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SelfFormatterFormatter`1.SerializeImplementation(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.SerializableFormatter`1">
            <summary>
            Formatter for all types that implement the ISerializable interface.
            </summary>
            <typeparam name="T">The type which can be serialized and deserialized by the formatter.</typeparam>
            <seealso cref="T:Sirenix.Serialization.BaseFormatter`1" />
        </member>
        <member name="M:Sirenix.Serialization.SerializableFormatter`1.GetUninitializedObject">
            <summary>
            Get an uninitialized object of type <see cref="!:T" />. WARNING: If you override this and return null, the object's ID will not be automatically registered and its OnDeserializing callbacks will not be automatically called, before deserialization begins.
            You will have to call <see cref="!:BaseFormatter&lt;T&gt;.RegisterReferenceID(T, IDataReader, DeserializationContext)" /> and <see cref="!:BaseFormatter&lt;T&gt;.InvokeOnDeserializingCallbacks(T, IDataReader, DeserializationContext)" /> immediately after creating the object yourself during deserialization.
            </summary>
            <returns>
            An uninitialized object of type <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializableFormatter`1.DeserializeImplementation(`0@,Sirenix.Serialization.IDataReader)">
            <summary>
            Provides the actual implementation for deserializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The uninitialized value to serialize into. This value will have been created earlier using <see cref="M:Sirenix.Serialization.BaseFormatter`1.GetUninitializedObject" />.</param>
            <param name="reader">The reader to deserialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializableFormatter`1.SerializeImplementation(`0@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Provides the actual implementation for serializing a value of type <see cref="!:T" />.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to serialize with.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializableFormatter`1.ReadSerializationInfo(Sirenix.Serialization.IDataReader)">
            <summary>
            Creates and reads into a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance using a given reader and context.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> which was read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializableFormatter`1.WriteSerializationInfo(System.Runtime.Serialization.SerializationInfo,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes the given <see cref="T:System.Runtime.Serialization.SerializationInfo" /> using the given writer.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.TimeSpanFormatter">
            <summary>
            Custom formatter for the <see cref="T:System.TimeSpan"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;System.TimeSpan&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.TimeSpanFormatter.Read(System.TimeSpan@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.TimeSpanFormatter.Write(System.TimeSpan@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.TypeFormatter">
            <summary>
            Formatter for the <see cref="T:System.Type"/> type which uses the reader/writer's <see cref="T:Sirenix.Serialization.TwoWaySerializationBinder"/> to bind types.
            </summary>
            <seealso cref="T:Sirenix.Serialization.MinimalBaseFormatter`1" />
        </member>
        <member name="M:Sirenix.Serialization.TypeFormatter.Read(System.Type@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.TypeFormatter.Write(System.Type@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.TypeFormatter.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>null.</returns>
        </member>
        <member name="T:Sirenix.Serialization.CustomSerializationPolicy">
            <summary>
            Helper class for quickly and easily implementing the <see cref="T:Sirenix.Serialization.ISerializationPolicy"/> interface.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.CustomSerializationPolicy.#ctor(System.String,System.Boolean,System.Func{System.Reflection.MemberInfo,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.CustomSerializationPolicy"/> class.
            </summary>
            <param name="id">The policy ID.</param>
            <param name="allowNonSerializableTypes">if set to <c>true</c> non serializable types will be allowed.</param>
            <param name="shouldSerializeFunc">The delegate to use for determining whether members should be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            The id argument or the shouldSerializeFunc argument was null.
            </exception>
        </member>
        <member name="P:Sirenix.Serialization.CustomSerializationPolicy.ID">
            <summary>
            Gets the identifier of the policy. This can be stored in the serialization metadata, so the policy used to serialize it can be recovered without knowing the policy at runtime. This ID should preferably be unique.
            </summary>
            <value>
            The identifier of the policy.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.CustomSerializationPolicy.AllowNonSerializableTypes">
            <summary>
            Gets a value indicating whether to allow non serializable types. (Types which are not decorated with <see cref="T:System.SerializableAttribute" />.)
            </summary>
            <value>
            <c>true</c> if serializable types are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.CustomSerializationPolicy.ShouldSerializeMember(System.Reflection.MemberInfo)">
            <summary>
            Gets a value indicating whether a given <see cref="T:System.Reflection.MemberInfo" /> should be serialized or not.
            </summary>
            <param name="member">The member to check.</param>
            <returns>
              <c>true</c> if the given member should be serialized, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Sirenix.Serialization.AlwaysFormatsSelfAttribute">
            <summary>
            Use this attribute to specify that a type that implements the <see cref="T:Sirenix.Serialization.ISelfFormatter"/>
            interface should *always* format itself regardless of other formatters being specified.
            <para />
            This means that the interface will be used to format all types derived from the type that
            is decorated with this attribute, regardless of custom formatters for the derived types.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Sirenix.Serialization.CustomFormatterAttribute">
            <summary>
            Attribute indicating that a class which implements the <see cref="T:Sirenix.Serialization.IFormatter`1" /> interface somewhere in its hierarchy is a custom formatter for the type T.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="F:Sirenix.Serialization.CustomFormatterAttribute.Priority">
            <summary>
            The priority of the formatter. Of all the available custom formatters, the formatter with the highest priority is always chosen.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.CustomFormatterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.CustomFormatterAttribute"/> class with priority 0.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.CustomFormatterAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.CustomFormatterAttribute"/> class.
            </summary>
            <param name="priority">The priority of the formatter. Of all the available custom formatters, the formatter with the highest priority is always chosen.</param>
        </member>
        <member name="T:Sirenix.Serialization.CustomGenericFormatterAttribute">
            <summary>
            Attribute indicating that a generic type definition class which implements the <see cref="T:Sirenix.Serialization.IFormatter`1" /> interface somewhere in its hierarchy is a custom formatter for *any variation* of the generic type definition T.
            <para />
            The formatter's generic type parameters are mapped onto the serialized type's generic type parameters.
            <para />
            For example, <see cref="T:Sirenix.Serialization.DictionaryFormatter`2"/> implements <see cref="T:Sirenix.Serialization.IFormatter`1"/>, where T is <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <seealso cref="T:Sirenix.Serialization.CustomFormatterAttribute" />
        </member>
        <member name="F:Sirenix.Serialization.CustomGenericFormatterAttribute.SerializedGenericTypeDefinition">
            <summary>
            The generic type definition of the serialized type.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.CustomGenericFormatterAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.CustomGenericFormatterAttribute"/> class.
            </summary>
            <param name="serializedGenericTypeDefinition">The generic type definition of the serialized type.</param>
            <param name="priority">The priority of the formatter. Of all the available custom formatters, the formatter with the highest priority is always chosen.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serializedGenericTypeDefinition"/> was null.</exception>
            <exception cref="T:System.ArgumentException">The type given in <paramref name="serializedGenericTypeDefinition"/> is not a generic type definition.</exception>
        </member>
        <member name="T:Sirenix.Serialization.DefaultSerializationBinder">
            <summary>
            Provides a default, catch-all <see cref="T:Sirenix.Serialization.TwoWaySerializationBinder"/> implementation. This binder only includes assembly names, without versions and tokens, in order to increase compatibility.
            </summary>
            <seealso cref="T:Sirenix.Serialization.TwoWaySerializationBinder" />
        </member>
        <member name="M:Sirenix.Serialization.DefaultSerializationBinder.BindToName(System.Type,Sirenix.Serialization.DebugContext)">
            <summary>
            Bind a type to a name.
            </summary>
            <param name="type">The type to bind.</param>
            <param name="debugContext">The debug context to log to.</param>
            <returns>
            The name that the type has been bound to.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type argument is null.</exception>
        </member>
        <member name="M:Sirenix.Serialization.DefaultSerializationBinder.ContainsType(System.String)">
            <summary>
            Determines whether the specified type name is mapped.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DefaultSerializationBinder.BindToType(System.String,Sirenix.Serialization.DebugContext)">
            <summary>
            Binds a name to type.
            </summary>
            <param name="typeName">The name of the type to bind.</param>
            <param name="debugContext">The debug context to log to.</param>
            <returns>
            The type that the name has been bound to, or null if the type could not be resolved.
            </returns>
            <exception cref="T:System.ArgumentNullException">The typeName argument is null.</exception>
        </member>
        <member name="T:Sirenix.Serialization.DeserializationContext">
            <summary>
            The context of a given deserialization session. This class maintains all internal and external references during deserialization.
            </summary>
            <seealso cref="!:Sirenix.Serialization.ICacheNotificationReceiver" />
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.DeserializationContext"/> class.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.#ctor(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.DeserializationContext"/> class.
            </summary>
            <param name="context">The streaming context to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.#ctor(System.Runtime.Serialization.FormatterConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.DeserializationContext"/> class.
            </summary>
            <param name="formatterConverter">The formatter converter to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.#ctor(System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.FormatterConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.DeserializationContext"/> class.
            </summary>
            <param name="context">The streaming context to use.</param>
            <param name="formatterConverter">The formatter converter to use.</param>
            <exception cref="T:System.ArgumentNullException">The formatterConverter parameter is null.</exception>
        </member>
        <member name="P:Sirenix.Serialization.DeserializationContext.StringReferenceResolver">
            <summary>
            Gets or sets the string reference resolver.
            </summary>
            <value>
            The string reference resolver.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.DeserializationContext.GuidReferenceResolver">
            <summary>
            Gets or sets the Guid reference resolver.
            </summary>
            <value>
            The Guid reference resolver.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.DeserializationContext.IndexReferenceResolver">
            <summary>
            Gets or sets the index reference resolver.
            </summary>
            <value>
            The index reference resolver.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.DeserializationContext.StreamingContext">
            <summary>
            Gets the streaming context.
            </summary>
            <value>
            The streaming context.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.DeserializationContext.FormatterConverter">
            <summary>
            Gets the formatter converter.
            </summary>
            <value>
            The formatter converter.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.DeserializationContext.Config">
            <summary>
            Gets or sets the serialization configuration.
            </summary>
            <value>
            The serialization configuration.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.RegisterInternalReference(System.Int32,System.Object)">
            <summary>
            Registers an internal reference to a given id.
            </summary>
            <param name="id">The id to register the reference with.</param>
            <param name="reference">The reference to register.</param>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.GetInternalReference(System.Int32)">
            <summary>
            Gets an internal reference from a given id, or null if the id has not been registered.
            </summary>
            <param name="id">The id of the reference to get.</param>
            <returns>An internal reference from a given id, or null if the id has not been registered.</returns>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.GetExternalObject(System.Int32)">
            <summary>
            Gets an external object reference by index, or null if the index could not be resolved.
            </summary>
            <param name="index">The index to resolve.</param>
            <returns>An external object reference by the given index, or null if the index could not be resolved.</returns>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.GetExternalObject(System.Guid)">
            <summary>
            Gets an external object reference by guid, or null if the guid could not be resolved.
            </summary>
            <param name="guid">The guid to resolve.</param>
            <returns>An external object reference by the given guid, or null if the guid could not be resolved.</returns>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.GetExternalObject(System.String)">
            <summary>
            Gets an external object reference by an id string, or null if the id string could not be resolved.
            </summary>
            <param name="id">The id string to resolve.</param>
            <returns>An external object reference by an id string, or null if the id string could not be resolved.</returns>
        </member>
        <member name="M:Sirenix.Serialization.DeserializationContext.Reset">
            <summary>
            Resets the deserialization context completely to baseline status, as if its constructor has just been called.
            This allows complete reuse of a deserialization context, with all of its internal reference buffers.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.EntryType">
            <summary>
            An entry type which is part of a stream being read by a <see cref="T:Sirenix.Serialization.IDataReader"/>.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.Invalid">
            <summary>
            Could not parse entry.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.String">
            <summary>
            Entry is a primitive value of type string or char.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.Guid">
            <summary>
            Entry is a primitive value of type guid.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.Integer">
            <summary>
            Entry is a primitive value of type sbyte, byte, short, ushort, int, uint, long or ulong.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.FloatingPoint">
            <summary>
            Entry is a primitive value of type float, double or decimal.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.Boolean">
            <summary>
            Entry is a primitive boolean value.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.Null">
            <summary>
            Entry is a null value.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.StartOfNode">
            <summary>
            Entry marks the start of a node, IE, a complex type that contains values of its own.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.EndOfNode">
            <summary>
            Entry marks the end of a node, IE, a complex type that contains values of its own.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.InternalReference">
            <summary>
            Entry contains an ID that is a reference to a node defined previously in the stream.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.ExternalReferenceByIndex">
            <summary>
            Entry contains the index of an external object in the DeserializationContext.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.ExternalReferenceByGuid">
            <summary>
            Entry contains the guid of an external object in the DeserializationContext.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.StartOfArray">
            <summary>
            Entry marks the start of an array.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.EndOfArray">
            <summary>
            Entry marks the end of an array.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.PrimitiveArray">
            <summary>
            Entry marks a primitive array.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.EndOfStream">
            <summary>
            Entry indicating that the reader has reached the end of the data stream.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.EntryType.ExternalReferenceByString">
            <summary>
            Entry contains the string id of an external object in the DeserializationContext.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.ExcludeDataFromInspectorAttribute">
            <summary>
            <para>Write 1 max 2 paragraphs in summery, they are supposed to be a breaf description and overview.</para>
            <para>Remember to use the para tag, it is equivalent of writing a 'p' tag in html.</para>
            </summary>
            <remarks>
            <para>If more clarifycation is needed write it here</para>
            <note type="note">Note that you can add notes!</note>
            </remarks>
            <example>
            Write an example description
            <code>
            // And write the code within code tags.
            </code>
            </example>
            <example>
            Write multiple examples!
            <code>
            // More code
            </code>
            </example>
        </member>
        <member name="T:Sirenix.Serialization.IExternalGuidReferenceResolver">
            <summary>
            Resolves external guid references to reference objects during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.IExternalGuidReferenceResolver.NextResolver">
            <summary>
            Gets or sets the next resolver in the chain.
            </summary>
            <value>
            The next resolver in the chain.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.IExternalGuidReferenceResolver.TryResolveReference(System.Guid,System.Object@)">
            <summary>
            Tries to resolve a reference from a given Guid.
            </summary>
            <param name="guid">The Guid to resolve.</param>
            <param name="value">The resolved value.</param>
            <returns><c>true</c> if the value was resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.IExternalGuidReferenceResolver.CanReference(System.Object,System.Guid@)">
            <summary>
            Determines whether this resolver can reference the specified value with a Guid.
            </summary>
            <param name="value">The value to check.</param>
            <param name="guid">The Guid which references the value.</param>
            <returns><c>true</c> if the value can be referenced; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Sirenix.Serialization.IExternalIndexReferenceResolver">
            <summary>
            Resolves external index references to reference objects during serialization and deserialization.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.IExternalIndexReferenceResolver.TryResolveReference(System.Int32,System.Object@)">
            <summary>
            Tries to resolve the given reference index to a reference value.
            </summary>
            <param name="index">The index to resolve.</param>
            <param name="value">The resolved value.</param>
            <returns><c>true</c> if the index could be resolved to a value, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.IExternalIndexReferenceResolver.CanReference(System.Object,System.Int32@)">
            <summary>
            Determines whether the specified value can be referenced externally via this resolver.
            </summary>
            <param name="value">The value to reference.</param>
            <param name="index">The index of the resolved value, if it can be referenced.</param>
            <returns><c>true</c> if the reference can be resolved, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Sirenix.Serialization.IExternalStringReferenceResolver">
            <summary>
            Resolves external strings references to reference objects during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.IExternalStringReferenceResolver.NextResolver">
            <summary>
            Gets or sets the next resolver in the chain.
            </summary>
            <value>
            The next resolver in the chain.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.IExternalStringReferenceResolver.TryResolveReference(System.String,System.Object@)">
            <summary>
            Tries to resolve a reference from a given Guid.
            </summary>
            <param name="id">The <see cref="T:System.String"/> to resolve.</param>
            <param name="value">The resolved value.</param>
            <returns><c>true</c> if the value was resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.IExternalStringReferenceResolver.CanReference(System.Object,System.String@)">
            <summary>
            Determines whether this resolver can reference the specified value with a string.
            </summary>
            <param name="value">The value to check.</param>
            <param name="id">The string which references the value.</param>
            <returns><c>true</c> if the value can be referenced; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Sirenix.Serialization.ISelfFormatter">
            <summary>
            Specifies that a type is capable of serializing itself using an <see cref="T:Sirenix.Serialization.IDataWriter"/> and an
            <see cref="T:Sirenix.Serialization.IDataReader"/>.
            <para />
            The deserialized type instance will be created without a constructor call using the
            <see cref="M:System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)"/>
            method if it is a reference type, otherwise it will be created using default(type).
            <para />
            Use <see cref="T:Sirenix.Serialization.AlwaysFormatsSelfAttribute"/> to specify that a class which implements this
            interface should *always* format itself regardless of other formatters being specified.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.ISelfFormatter.Serialize(Sirenix.Serialization.IDataWriter)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.ISelfFormatter.Deserialize(Sirenix.Serialization.IDataReader)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.ISerializationPolicy">
            <summary>
            Defines which members to serialize and deserialize when there aren't any custom formatters for a type.
            Usually, it governs the behaviour of the <see cref="T:Sirenix.Serialization.FormatterEmitter"/> and <see cref="T:Sirenix.Serialization.ReflectionFormatter`1"/> classes.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.ISerializationPolicy.ID">
            <summary>
            Gets the identifier of the policy. This can be stored in the serialization metadata, so the policy used to serialize can be recovered upon deserialization without knowing the policy ahead of time. This ID should preferably be unique.
            </summary>
            <value>
            The identifier of the policy.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.ISerializationPolicy.AllowNonSerializableTypes">
            <summary>
            Gets a value indicating whether to allow non serializable types. (Types which are not decorated with <see cref="T:System.SerializableAttribute"/>.)
            </summary>
            <value>
            <c>true</c> if serializable types are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.ISerializationPolicy.ShouldSerializeMember(System.Reflection.MemberInfo)">
            <summary>
            Gets a value indicating whether a given <see cref="T:System.Reflection.MemberInfo"/> should be serialized or not.
            </summary>
            <param name="member">The member to check.</param>
            <returns><c>true</c> if the given member should be serialized, otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Sirenix.Serialization.NodeInfo">
            <summary>
            Contains information about a node during deserialization and serialization.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.NodeInfo.Empty">
            <summary>
            An empty node.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.NodeInfo.Name">
            <summary>
            The name of the node.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.NodeInfo.Id">
            <summary>
            The id of the node, or -1 if the node has no id.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.NodeInfo.Type">
            <summary>
            The type of the node, or null if the node has no type metadata.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.NodeInfo.IsArray">
            <summary>
            Whether the node is an array or not.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.NodeInfo.IsEmpty">
            <summary>
            Whether the node is an empty node.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.NodeInfo.#ctor(System.String,System.Int32,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.NodeInfo"/> struct.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="id">The id of the node.</param>
            <param name="type">The type of the node.</param>
            <param name="isArray">If set to <c>true</c> the node is an array node.</param>
        </member>
        <member name="M:Sirenix.Serialization.NodeInfo.op_Equality(Sirenix.Serialization.NodeInfo,Sirenix.Serialization.NodeInfo)">
            <summary>
            Implements the operator == between <see cref="T:Sirenix.Serialization.NodeInfo"/> and <see cref="T:Sirenix.Serialization.NodeInfo"/>.
            </summary>
            <param name="a">The first <see cref="T:Sirenix.Serialization.NodeInfo"/>.</param>
            <param name="b">The second <see cref="T:Sirenix.Serialization.NodeInfo"/>.</param>
            <returns>
            <c>true</c> if the nodes were equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.NodeInfo.op_Inequality(Sirenix.Serialization.NodeInfo,Sirenix.Serialization.NodeInfo)">
            <summary>
            Implements the operator != between <see cref="T:Sirenix.Serialization.NodeInfo"/> and <see cref="T:Sirenix.Serialization.NodeInfo"/>.
            </summary>
            <param name="a">The first <see cref="T:Sirenix.Serialization.NodeInfo"/>.</param>
            <param name="b">The second <see cref="T:Sirenix.Serialization.NodeInfo"/>.</param>
            <returns>
            <c>true</c> if the nodes were not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.NodeInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.NodeInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Sirenix.Serialization.PreviouslySerializedAsAttribute">
            <summary>
            Indicates that an instance field or auto-property was previously serialized with a different name, so that values serialized with the old name will be properly deserialized into this member.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Sirenix.Serialization.PreviouslySerializedAsAttribute.Name">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.PreviouslySerializedAsAttribute.#ctor(System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.SerializationConfig">
            <summary>
            Defines the configuration during serialization and deserialization. This class is thread-safe.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationConfig.#ctor">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationConfig.SerializationPolicy">
            <summary>
            Gets or sets the serialization policy. This value is never null; if set to null, it will default to <see cref="P:Sirenix.Serialization.SerializationPolicies.Unity"/>.
            </summary>
            <value>
            The serialization policy.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.SerializationConfig.DebugContext">
            <summary>
            Gets or sets the debug context. This value is never null; if set to null, a new default instance of <see cref="T:Sirenix.Serialization.DebugContext"/> will be created upon the next get.
            </summary>
            <value>
            The debug context.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.SerializationConfig.ResetToDefault">
            <summary>
            Resets the configuration to a default configuration, as if the constructor had just been called.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.DebugContext">
            <summary>
            Defines a context for debugging and logging during serialization and deserialization. This class is thread-safe.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.DebugContext.Logger">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.DebugContext.LoggingPolicy">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.DebugContext.ErrorHandlingPolicy">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DebugContext.LogWarning(System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DebugContext.LogError(System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DebugContext.LogException(System.Exception)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.SerializationAbortException">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationAbortException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:SerializationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationAbortException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="!:SerializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Sirenix.Serialization.SerializationContext">
            <summary>
            The context of a given serialization session. This class maintains all internal and external references during serialization.
            </summary>
            <seealso cref="!:Sirenix.Serialization.ICacheNotificationReceiver" />
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.SerializationContext"/> class.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.#ctor(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.SerializationContext"/> class.
            </summary>
            <param name="context">The streaming context to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.#ctor(System.Runtime.Serialization.FormatterConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.SerializationContext"/> class.
            </summary>
            <param name="formatterConverter">The formatter converter to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.#ctor(System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.FormatterConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.SerializationContext"/> class.
            </summary>
            <param name="context">The streaming context to use.</param>
            <param name="formatterConverter">The formatter converter to use.</param>
            <exception cref="T:System.ArgumentNullException">The formatterConverter parameter is null.</exception>
        </member>
        <member name="P:Sirenix.Serialization.SerializationContext.StreamingContext">
            <summary>
            Gets the streaming context.
            </summary>
            <value>
            The streaming context.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.SerializationContext.FormatterConverter">
            <summary>
            Gets the formatter converter.
            </summary>
            <value>
            The formatter converter.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.SerializationContext.IndexReferenceResolver">
            <summary>
            Gets or sets the index reference resolver.
            </summary>
            <value>
            The index reference resolver.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.SerializationContext.StringReferenceResolver">
            <summary>
            Gets or sets the string reference resolver.
            </summary>
            <value>
            The string reference resolver.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.SerializationContext.GuidReferenceResolver">
            <summary>
            Gets or sets the Guid reference resolver.
            </summary>
            <value>
            The Guid reference resolver.
            </value>
        </member>
        <member name="P:Sirenix.Serialization.SerializationContext.Config">
            <summary>
            Gets or sets the serialization configuration.
            </summary>
            <value>
            The serialization configuration.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.TryGetInternalReferenceId(System.Object,System.Int32@)">
            <summary>
            Tries to get the id of an internally referenced object.
            </summary>
            <param name="reference">The reference to get the id of.</param>
            <param name="id">The id that was found, or -1 if no id was found.</param>
            <returns><c>true</c> if a reference was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.TryRegisterInternalReference(System.Object,System.Int32@)">
            <summary>
            Tries to register an internal reference. Returns <c>true</c> if the reference was registered, otherwise, <c>false</c> when the reference has already been registered.
            </summary>
            <param name="reference">The reference to register.</param>
            <param name="id">The id of the registered reference.</param>
            <returns><c>true</c> if the reference was registered, otherwise, <c>false</c> when the reference has already been registered.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.TryRegisterExternalReference(System.Object,System.Int32@)">
            <summary>
            Tries to register an external index reference.
            </summary>
            <param name="obj">The object to reference.</param>
            <param name="index">The index of the referenced object.</param>
            <returns><c>true</c> if the object could be referenced by index; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.TryRegisterExternalReference(System.Object,System.Guid@)">
            <summary>
            Tries to register an external guid reference.
            </summary>
            <param name="obj">The object to reference.</param>
            <param name="guid">The guid of the referenced object.</param>
            <returns><c>true</c> if the object could be referenced by guid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.TryRegisterExternalReference(System.Object,System.String@)">
            <summary>
            Tries to register an external string reference.
            </summary>
            <param name="obj">The object to reference.</param>
            <param name="id">The id string of the referenced object.</param>
            <returns><c>true</c> if the object could be referenced by string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.ResetInternalReferences">
            <summary>
            Resets the context's internal reference map.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationContext.ResetToDefault">
            <summary>
            Resets the serialization context completely to baseline status, as if its constructor has just been called.
            This allows complete reuse of a serialization context, with all of its internal reference buffers.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.OdinSerializeAttribute">
            <summary>
            Indicates that an instance field or auto-property should be serialized by Odin.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Sirenix.Serialization.TwoWaySerializationBinder">
            <summary>
            Binds types to strings during serialization, and strings to types during deserialization.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.TwoWaySerializationBinder.Default">
            <summary>
            Provides a default, catch-all <see cref="T:Sirenix.Serialization.TwoWaySerializationBinder"/> implementation. This binder only includes assembly names, without versions and tokens, in order to increase compatibility.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.TwoWaySerializationBinder.BindToName(System.Type,Sirenix.Serialization.DebugContext)">
            <summary>
            Bind a type to a name.
            </summary>
            <param name="type">The type to bind.</param>
            <param name="debugContext">The debug context to log to.</param>
            <returns>The name that the type has been bound to.</returns>
        </member>
        <member name="M:Sirenix.Serialization.TwoWaySerializationBinder.BindToType(System.String,Sirenix.Serialization.DebugContext)">
            <summary>
            Binds a name to a type.
            </summary>
            <param name="typeName">The name of the type to bind.</param>
            <param name="debugContext">The debug context to log to.</param>
            <returns>The type that the name has been bound to, or null if the type could not be resolved.</returns>
        </member>
        <member name="M:Sirenix.Serialization.TwoWaySerializationBinder.ContainsType(System.String)">
            <summary>
            Determines whether the specified type name is mapped.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.SerializationPolicies">
            <summary>
            Contains a set of default implementations of the <see cref="T:Sirenix.Serialization.ISerializationPolicy"/> interface.
            <para />
            NOTE: Policies are not necessarily compatible with each other in intuitive ways.
            Data serialized with the <see cref="P:Sirenix.Serialization.SerializationPolicies.Everything"/> policy
            will for example fail to deserialize auto-properties with <see cref="P:Sirenix.Serialization.SerializationPolicies.Strict"/>,
            even if only strict data is needed.
            It is best to ensure that you always use the same policy for serialization and deserialization.
            <para />
            This class and all of its policies are thread-safe.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationPolicies.TryGetByID(System.String,Sirenix.Serialization.ISerializationPolicy@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationPolicies.Everything">
            <summary>
            All fields not marked with <see cref="T:System.NonSerializedAttribute"/> are serialized. If a field is marked with both <see cref="T:System.NonSerializedAttribute"/> and <see cref="T:Sirenix.Serialization.OdinSerializeAttribute"/>, then the field will be serialized.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationPolicies.Unity">
            <summary>
            Public fields and fields or auto-properties marked with <see cref="T:UnityEngine.SerializeField"/> or <see cref="T:Sirenix.Serialization.OdinSerializeAttribute"/> and not marked with <see cref="T:System.NonSerializedAttribute"/> are serialized.
            <para />
            There is one exception: all fields in private nested types marked as compiler generated (e.g. lambda capture classes) are also serialized.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationPolicies.Strict">
            <summary>
            Only fields and auto-properties marked with <see cref="T:UnityEngine.SerializeField"/> or <see cref="T:Sirenix.Serialization.OdinSerializeAttribute"/> and not marked with <see cref="T:System.NonSerializedAttribute"/> are serialized.
            <para />
            There is one exception: all fields in private nested types marked as compiler generated (e.g. lambda capture classes) are also serialized.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.BooleanSerializer">
            <summary>
            Serializer for the <see cref="T:System.Boolean"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Boolean&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.BooleanSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Boolean" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.BooleanSerializer.WriteValue(System.String,System.Boolean,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Boolean" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.ByteSerializer">
            <summary>
            Serializer for the <see cref="T:System.Byte"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Byte&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.ByteSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Byte" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.ByteSerializer.WriteValue(System.String,System.Byte,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Byte" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.CharSerializer">
            <summary>
            Serializer for the <see cref="T:System.Char"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Char&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.CharSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Char" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.CharSerializer.WriteValue(System.String,System.Char,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Char" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.ComplexTypeSerializer`1">
            <summary>
            Serializer for all complex types; IE, types which are not primitives as determined by the <see cref="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveType(System.Type)" /> method.
            </summary>
            <typeparam name="T">The type which the <see cref="T:Sirenix.Serialization.ComplexTypeSerializer`1" /> can serialize and deserialize.</typeparam>
            <seealso cref="T:Sirenix.Serialization.Serializer`1" />
        </member>
        <member name="M:Sirenix.Serialization.ComplexTypeSerializer`1.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="!:T" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.ComplexTypeSerializer`1.WriteValue(System.String,`0,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="!:T" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.DecimalSerializer">
            <summary>
            Serializer for the <see cref="T:System.Decimal"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Decimal&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.DecimalSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Decimal" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.DecimalSerializer.WriteValue(System.String,System.Decimal,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Decimal" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.DoubleSerializer">
            <summary>
            Serializer for the <see cref="T:System.Double"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Double&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.DoubleSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Double" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.DoubleSerializer.WriteValue(System.String,System.Double,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Double" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.EnumSerializer`1">
            <summary>
            Serializer for all enums.
            </summary>
            <typeparam name="T">The type of the enum to serialize and deserialize.</typeparam>
            <seealso cref="T:Sirenix.Serialization.Serializer`1" />
        </member>
        <member name="M:Sirenix.Serialization.EnumSerializer`1.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads an enum value of type <see cref="!:T" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.EnumSerializer`1.WriteValue(System.String,`0,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes an enum value of type <see cref="!:T" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.GuidSerializer">
            <summary>
            Serializer for the <see cref="T:System.Guid"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Guid&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.GuidSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Guid" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.GuidSerializer.WriteValue(System.String,System.Guid,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Guid" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Int16Serializer">
            <summary>
            Serializer for the <see cref="T:System.Int16"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Int16&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.Int16Serializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Int16" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.Int16Serializer.WriteValue(System.String,System.Int16,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Int16" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Int32Serializer">
            <summary>
            Serializer for the <see cref="T:System.Int32"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Int32&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.Int32Serializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Int32" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.Int32Serializer.WriteValue(System.String,System.Int32,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Int32" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Int64Serializer">
            <summary>
            Serializer for the <see cref="T:System.Int64"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Int64&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.Int64Serializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Int64" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.Int64Serializer.WriteValue(System.String,System.Int64,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Int64" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.IntPtrSerializer">
            <summary>
            Serializer for the <see cref="T:System.IntPtr"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.IntPtr&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.IntPtrSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.IntPtr" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.IntPtrSerializer.WriteValue(System.String,System.IntPtr,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.IntPtr" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.SByteSerializer">
            <summary>
            Serializer for the <see cref="T:System.SByte"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.SByte&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.SByteSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.SByte" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SByteSerializer.WriteValue(System.String,System.SByte,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.SByte" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Serializer">
            <summary>
            Serializes and deserializes a given type, and wraps serialization and deserialization with all the proper calls to free formatters from tedious boilerplate.
            <para />
            Whenever serializing or deserializing anything, it is *strongly recommended* to use <see cref="M:Sirenix.Serialization.Serializer.Get``1"/> to get a proper wrapping serializer for that type.
            <para />
            NOTE: This class should NOT be inherited from; it is hard-coded into the system.
            <para />
            To extend the serialization system, instead create custom formatters, which are used by the <see cref="T:Sirenix.Serialization.ComplexTypeSerializer`1"/> class.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.Serializer.GetForValue(System.Object)">
            <summary>
            Gets a <see cref="T:Sirenix.Serialization.Serializer"/> for the given value. If the value is null, it will be treated as a value of type <see cref="T:System.Object"/>.
            </summary>
            <param name="value">The value to get a <see cref="T:Sirenix.Serialization.Serializer"/> for.</param>
            <returns>A <see cref="T:Sirenix.Serialization.Serializer"/> for the given value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.Serializer.Get``1">
            <summary>
            Gets a <see cref="T:Sirenix.Serialization.Serializer"/> for type T.
            </summary>
            <typeparam name="T">The type to get a <see cref="T:Sirenix.Serialization.Serializer"/> for.</typeparam>
            <returns>A <see cref="T:Sirenix.Serialization.Serializer"/> for type T.</returns>
        </member>
        <member name="M:Sirenix.Serialization.Serializer.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Sirenix.Serialization.Serializer"/> for the given type.
            </summary>
            <param name="type">The type to get a <see cref="T:Sirenix.Serialization.Serializer"/> for.</param>
            <returns>A <see cref="T:Sirenix.Serialization.Serializer"/> for the given type.</returns>
            <exception cref="T:System.ArgumentNullException">The type argument is null.</exception>
        </member>
        <member name="M:Sirenix.Serialization.Serializer.ReadValueWeak(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value weakly, casting it into object. Use this method if you don't know what type you're going to be working with at compile time.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>The value which has been read.</returns>
        </member>
        <member name="M:Sirenix.Serialization.Serializer.WriteValueWeak(System.Object,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a weakly typed value. Use this method if you don't know what type you're going to be working with at compile time.
            </summary>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.Serializer.WriteValueWeak(System.String,System.Object,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a weakly typed value with a given name. Use this method if you don't know what type you're going to be working with at compile time.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Serializer`1">
            <summary>
            Serializes and deserializes the type <see cref="!:T"/>, and wraps serialization and deserialization with all the proper calls to free formatters from tedious boilerplate.
            <para />
            Whenever serializing or deserializing anything, it is *strongly recommended* to use <see cref="M:Sirenix.Serialization.Serializer.Get``1"/> to get a proper wrapping serializer for that type.
            <para />
            NOTE: This class should NOT be inherited from; it is hard-coded into the system.
            <para />
            To extend the serialization system, instead create custom formatters, which are used by the <see cref="T:Sirenix.Serialization.ComplexTypeSerializer`1"/> class.
            </summary>
            <typeparam name="T">The type which the <see cref="T:Sirenix.Serialization.Serializer`1"/> can serialize and deserialize.</typeparam>
        </member>
        <member name="M:Sirenix.Serialization.Serializer`1.ReadValueWeak(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="!:T"/> weakly, casting it into object. Use this method if you don't know what type you're going to be working with at compile time.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.Serializer`1.WriteValueWeak(System.String,System.Object,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a weakly typed value of type <see cref="!:T"/> with a given name. Use this method if you don't know what type you're going to be working with at compile time.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.Serializer`1.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="!:T"/>.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.Serializer`1.WriteValue(`0,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="!:T"/>.
            </summary>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.Serializer`1.WriteValue(System.String,`0,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="!:T"/> with a given name.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.SingleSerializer">
            <summary>
            Serializer for the <see cref="T:System.Single"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.Single&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.SingleSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.Single" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SingleSerializer.WriteValue(System.String,System.Single,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.Single" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.StringSerializer">
            <summary>
            Serializer for the <see cref="T:System.String"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.String&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.StringSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.String" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.StringSerializer.WriteValue(System.String,System.String,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.String" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.UInt16Serializer">
            <summary>
            Serializer for the <see cref="T:System.UInt16"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.UInt16&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.UInt16Serializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.UInt16" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.UInt16Serializer.WriteValue(System.String,System.UInt16,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.UInt64" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.UInt32Serializer">
            <summary>
            Serializer for the <see cref="T:System.UInt32"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.UInt32&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.UInt32Serializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.UInt32" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.UInt32Serializer.WriteValue(System.String,System.UInt32,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.UInt32" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.UInt64Serializer">
            <summary>
            Serializer for the <see cref="T:System.UInt64"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.UInt64&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.UInt64Serializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.UInt64" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.UInt64Serializer.WriteValue(System.String,System.UInt64,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.UInt64" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.UIntPtrSerializer">
            <summary>
            Serializer for the <see cref="T:System.UIntPtr"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.Serializer&lt;System.UIntPtr&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.UIntPtrSerializer.ReadValue(Sirenix.Serialization.IDataReader)">
            <summary>
            Reads a value of type <see cref="T:System.UIntPtr" />.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>
            The value which has been read.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.UIntPtrSerializer.WriteValue(System.String,System.UIntPtr,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes a value of type <see cref="T:System.UIntPtr" />.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.AnimationCurveFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.AnimationCurve"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.AnimationCurve&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.AnimationCurveFormatter.GetUninitializedObject">
            <summary>
            Returns null.
            </summary>
            <returns>
            A null value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.AnimationCurveFormatter.Read(UnityEngine.AnimationCurve@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.AnimationCurveFormatter.Write(UnityEngine.AnimationCurve@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.BoundsFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Bounds"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Bounds&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.BoundsFormatter.Read(UnityEngine.Bounds@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.BoundsFormatter.Write(UnityEngine.Bounds@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Color32Formatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Color32"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Color32&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.Color32Formatter.Read(UnityEngine.Color32@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.Color32Formatter.Write(UnityEngine.Color32@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.ColorBlockFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.UI.ColorBlock"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.UI.ColorBlock&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.ColorBlockFormatter.Read(UnityEngine.UI.ColorBlock@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.ColorBlockFormatter.Write(UnityEngine.UI.ColorBlock@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.ColorFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Color"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Color&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.ColorFormatter.Read(UnityEngine.Color@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.ColorFormatter.Write(UnityEngine.Color@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.IDictionaryKeyPathProvider">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.IDictionaryKeyPathProvider.ProviderID">
            <summary>
            Gets the provider identifier.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.IDictionaryKeyPathProvider.GetPathStringFromKey(System.Object)">
            <summary>
            Gets the path string from key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDictionaryKeyPathProvider.GetKeyFromPathString(System.String)">
            <summary>
            Gets the key from path string.
            </summary>
            <param name="pathStr">The path string.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDictionaryKeyPathProvider.Compare(System.Object,System.Object)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="T:Sirenix.Serialization.IDictionaryKeyPathProvider`1">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.IDictionaryKeyPathProvider`1.GetPathStringFromKey(`0)">
            <summary>
            Gets the path string from key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDictionaryKeyPathProvider`1.GetKeyFromPathString(System.String)">
            <summary>
            Gets the key from path string.
            </summary>
            <param name="pathStr">The path string.</param>
        </member>
        <member name="M:Sirenix.Serialization.IDictionaryKeyPathProvider`1.Compare(`0,`0)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="T:Sirenix.Serialization.GradientAlphaKeyFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.GradientAlphaKey"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.GradientAlphaKey&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.GradientAlphaKeyFormatter.Read(UnityEngine.GradientAlphaKey@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.GradientAlphaKeyFormatter.Write(UnityEngine.GradientAlphaKey@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.GradientColorKeyFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.GradientColorKey"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.GradientColorKey&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.GradientColorKeyFormatter.Read(UnityEngine.GradientColorKey@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.GradientColorKeyFormatter.Write(UnityEngine.GradientColorKey@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.GradientFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Gradient"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Gradient&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.GradientFormatter.Read(UnityEngine.Gradient@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.GradientFormatter.Write(UnityEngine.Gradient@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.IOverridesSerializationFormat">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.IOverridesSerializationFormat.GetFormatToSerializeAs(System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.ISupportsPrefabSerialization">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.ISupportsPrefabSerialization.SerializationData">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.KeyframeFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Keyframe"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Keyframe&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.KeyframeFormatter.Read(UnityEngine.Keyframe@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.KeyframeFormatter.Write(UnityEngine.Keyframe@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.LayerMaskFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.LayerMask"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.LayerMask&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.LayerMaskFormatter.Read(UnityEngine.LayerMask@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.LayerMaskFormatter.Write(UnityEngine.LayerMask@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.QuaternionFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Quaternion"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Quaternion&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.QuaternionFormatter.Read(UnityEngine.Quaternion@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.QuaternionFormatter.Write(UnityEngine.Quaternion@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.RectFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Rect"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Rect&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.RectFormatter.Read(UnityEngine.Rect@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.RectFormatter.Write(UnityEngine.Rect@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.SerializationData">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.SerializedFormat">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.SerializedBytes">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.ReferencedUnityObjects">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.PrefabModificationsReferencedUnityObjectsFieldName">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.PrefabModificationsFieldName">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.PrefabFieldName">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Serialization.SerializationData.HasEditorData">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.SerializedBytesString">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.Prefab">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.PrefabModificationsReferencedUnityObjects">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.PrefabModifications">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.SerializationData.SerializationNodes">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationData.Reset">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.UnityEventFormatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Events.UnityEvent"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.ReflectionFormatter&lt;UnityEngine.Events.UnityEvent&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.UnityEventFormatter.GetUninitializedObject">
            <summary>
            Gets a new UnityEvent instance.
            </summary>
            <returns>
            A new UnityEvent instance.
            </returns>
        </member>
        <member name="T:Sirenix.Serialization.UnityEventFormatter`1">
            <summary>
            Custom generic formatter for the <see cref="T:UnityEngine.Events.UnityEvent`1"/>, <see cref="T:UnityEngine.Events.UnityEvent`2"/>, <see cref="T:UnityEngine.Events.UnityEvent`3"/> and <see cref="T:UnityEngine.Events.UnityEvent`4"/> types.
            </summary>
            <typeparam name="T">The type of UnityEvent that this formatter can serialize and deserialize.</typeparam>
            <seealso cref="!:Sirenix.Serialization.ReflectionFormatter&lt;UnityEngine.Events.UnityEvent&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.UnityEventFormatter`1.GetUninitializedObject">
            <summary>
            Get an uninitialized object of type <see cref="!:T" />.
            </summary>
            <returns>
            An uninitialized object of type <see cref="!:T" />.
            </returns>
        </member>
        <member name="T:Sirenix.Serialization.UnityReferenceResolver">
            <summary>
            Resolves external index references to Unity objects.
            </summary>
            <seealso cref="T:Sirenix.Serialization.IExternalIndexReferenceResolver" />
            <seealso cref="!:Sirenix.Serialization.ICacheNotificationReceiver" />
        </member>
        <member name="M:Sirenix.Serialization.UnityReferenceResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.UnityReferenceResolver"/> class.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnityReferenceResolver.#ctor(System.Collections.Generic.List{UnityEngine.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Serialization.UnityReferenceResolver"/> class with a list of Unity objects.
            </summary>
            <param name="referencedUnityObjects">The referenced Unity objects.</param>
        </member>
        <member name="M:Sirenix.Serialization.UnityReferenceResolver.GetReferencedUnityObjects">
            <summary>
            Gets the currently referenced Unity objects.
            </summary>
            <returns>A list of the currently referenced Unity objects.</returns>
        </member>
        <member name="M:Sirenix.Serialization.UnityReferenceResolver.SetReferencedUnityObjects(System.Collections.Generic.List{UnityEngine.Object})">
            <summary>
            Sets the referenced Unity objects of the resolver to a given list, or a new list if the value is null.
            </summary>
            <param name="referencedUnityObjects">The referenced Unity objects to set, or null if a new list is required.</param>
        </member>
        <member name="M:Sirenix.Serialization.UnityReferenceResolver.CanReference(System.Object,System.Int32@)">
            <summary>
            Determines whether the specified value can be referenced externally via this resolver.
            </summary>
            <param name="value">The value to reference.</param>
            <param name="index">The index of the resolved value, if it can be referenced.</param>
            <returns>
              <c>true</c> if the reference can be resolved, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.UnityReferenceResolver.TryResolveReference(System.Int32,System.Object@)">
            <summary>
            Tries to resolve the given reference index to a reference value.
            </summary>
            <param name="index">The index to resolve.</param>
            <param name="value">The resolved value.</param>
            <returns>
              <c>true</c> if the index could be resolved to a value, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.UnityReferenceResolver.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.UnitySerializationInitializer">
            <summary>
            Utility class which initializes the Sirenix serialization system to be compatible with Unity.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationInitializer.Initialize">
            <summary>
            Initializes the Sirenix serialization system to be compatible with Unity.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.Vector2Formatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Vector2"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Vector2&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.Vector2Formatter.Read(UnityEngine.Vector2@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.Vector2Formatter.Write(UnityEngine.Vector2@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Vector3Formatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Vector3"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Vector3&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.Vector3Formatter.Read(UnityEngine.Vector3@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.Vector3Formatter.Write(UnityEngine.Vector3@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Vector4Formatter">
            <summary>
            Custom formatter for the <see cref="T:UnityEngine.Vector4"/> type.
            </summary>
            <seealso cref="!:Sirenix.Serialization.MinimalBaseFormatter&lt;UnityEngine.Vector4&gt;" />
        </member>
        <member name="M:Sirenix.Serialization.Vector4Formatter.Read(UnityEngine.Vector4@,Sirenix.Serialization.IDataReader)">
            <summary>
            Reads into the specified value using the specified reader.
            </summary>
            <param name="value">The value to read into.</param>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.Vector4Formatter.Write(UnityEngine.Vector4@,Sirenix.Serialization.IDataWriter)">
            <summary>
            Writes from the specified value using the specified writer.
            </summary>
            <param name="value">The value to write from.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="T:Sirenix.Serialization.Buffer`1">
            <summary>
            Provides a way of claiming and releasing cached array buffers.
            </summary>
            <typeparam name="T">The element type of the array to buffer.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Sirenix.Serialization.Buffer`1.Count">
            <summary>
            Gets the total element count of the buffered array. This will always be a power of two.
            </summary>
            <value>
            The total element count of the buffered array.
            </value>
            <exception cref="T:System.InvalidOperationException">Cannot access a buffer while it is freed.</exception>
        </member>
        <member name="P:Sirenix.Serialization.Buffer`1.ByteSize">
            <summary>
            Gets the total size in bytes of the buffer in memory.
            </summary>
            <value>
            The total size in bytes of the buffer in memory.
            </value>
            <exception cref="T:System.InvalidOperationException">Cannot access a buffer while it is freed.</exception>
        </member>
        <member name="P:Sirenix.Serialization.Buffer`1.Array">
            <summary>
            Gets the buffered array.
            </summary>
            <value>
            The buffered array.
            </value>
            <exception cref="T:System.InvalidOperationException">Cannot access a buffer while it is freed.</exception>
        </member>
        <member name="P:Sirenix.Serialization.Buffer`1.IsFree">
            <summary>
            Gets a value indicating whether this buffer is free.
            </summary>
            <value>
              <c>true</c> if this buffer is free; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sirenix.Serialization.Buffer`1.Claim(System.Int32)">
            <summary>
            Claims a buffer with the specified minimum capacity. Note: buffers always have a capacity equal to or larger than 256.
            </summary>
            <param name="minimumCapacity">The minimum capacity.</param>
            <returns>A buffer which has a capacity equal to or larger than the specified minimum capacity.</returns>
            <exception cref="T:System.ArgumentException">Requested size of buffer must be larger than 0.</exception>
        </member>
        <member name="M:Sirenix.Serialization.Buffer`1.Free(Sirenix.Serialization.Buffer{`0})">
            <summary>
            Frees the specified buffer.
            </summary>
            <param name="buffer">The buffer to free.</param>
            <exception cref="T:System.ArgumentNullException">The buffer argument is null.</exception>
        </member>
        <member name="M:Sirenix.Serialization.Buffer`1.Free">
            <summary>
            Frees this buffer.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.Buffer`1.Dispose">
            <summary>
            Frees this buffer.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.FormatterLocator">
            <summary>
            Utility class for locating and caching formatters for all non-primitive types.
            </summary>
        </member>
        <member name="E:Sirenix.Serialization.FormatterLocator.OnLocatedEmittableFormatterForType">
            <summary>
            Editor-only event that fires whenever an emittable formatter has been located.
            This event is used by the AOT formatter pre-emitter to locate types that need to have formatters pre-emitted.
            </summary>
        </member>
        <member name="E:Sirenix.Serialization.FormatterLocator.OnLocatedFormatter">
            <summary>
            Editor-only event that fires whenever a formatter has been located.
            </summary>
        </member>
        <member name="E:Sirenix.Serialization.FormatterLocator.FormatterResolve">
            <summary>
            This event is invoked before everything else when a formatter is being resolved for a given type. If any invoked delegate returns a valid formatter, that formatter is used and the resolve process stops there.
            <para />
            This can be used to hook into and extend the serialization system's formatter resolution logic.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.FormatterLocator.GetFormatter``1(Sirenix.Serialization.ISerializationPolicy)">
            <summary>
            Gets a formatter for the type <see cref="!:T" />.
            </summary>
            <typeparam name="T">The type to get a formatter for.</typeparam>
            <param name="policy">The serialization policy to use if a formatter has to be emitted. If null, <see cref="P:Sirenix.Serialization.SerializationPolicies.Strict"/> is used.</param>
            <returns>
            A formatter for the type <see cref="!:T" />.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.FormatterLocator.GetFormatter(System.Type,Sirenix.Serialization.ISerializationPolicy)">
            <summary>
            Gets a formatter for a given type.
            </summary>
            <param name="type">The type to get a formatter for.</param>
            <param name="policy">The serialization policy to use if a formatter has to be emitted. If null, <see cref="P:Sirenix.Serialization.SerializationPolicies.Strict"/> is used.</param>
            <returns>
            A formatter for the given type.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type argument is null.</exception>
        </member>
        <member name="T:Sirenix.Serialization.FormatterUtilities">
            <summary>
            Provides an array of utility methods which are commonly used by serialization formatters.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.GetSerializableMembersMap(System.Type,Sirenix.Serialization.ISerializationPolicy)">
            <summary>
            Gets a map of all serializable members on the given type. This will also properly map names extracted from <see cref="T:UnityEngine.Serialization.FormerlySerializedAsAttribute"/> and <see cref="T:Sirenix.Serialization.PreviouslySerializedAsAttribute"/> to their corresponding members.
            </summary>
            <param name="type">The type to get a map for.</param>
            <param name="policy">The serialization policy to use. If null, <see cref="P:Sirenix.Serialization.SerializationPolicies.Strict"/> is used.</param>
            <returns>A map of all serializable members on the given type.</returns>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.GetSerializableMembers(System.Type,Sirenix.Serialization.ISerializationPolicy)">
            <summary>
            Gets an array of all serializable members on the given type.
            </summary>
            <param name="type">The type to get serializable members for.</param>
            <param name="policy">The serialization policy to use. If null, <see cref="P:Sirenix.Serialization.SerializationPolicies.Strict"/> is used.</param>
            <returns>An array of all serializable members on the given type.</returns>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.CreateUnityNull(System.Type,System.Type)">
            <summary>
            Creates a fake Unity null value of a given type, for the given <see cref="T:UnityEngine.Object"/>-derived owning type.
            <para />
            Unity uses these kinds of values to indicate missing object references.
            </summary>
            <param name="nullType">Type of the null value.</param>
            <param name="owningType">Type of the owning value. This is the value which changes the <see cref="T:UnityEngine.MissingReferenceException"/> which you get.</param>
            <returns>A fake Unity null value of a given type.</returns>
            <exception cref="T:System.ArgumentNullException">The nullType or owningType parameter is null.</exception>
            <exception cref="T:System.ArgumentException">
            The type given in the nullType parameter is not a Unity object.
            or
            The type given in the owningType parameter is not a Unity object.
            </exception>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveType(System.Type)">
            <summary>
            Determines whether a given type is a primitive type to the serialization system.
            <para />
            The following criteria are checked: type.IsPrimitive or type.IsEnum, or type is a <see cref="T:System.Decimal"/>, <see cref="T:System.String"/> or <see cref="T:System.Guid"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the given type is a primitive type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.IsPrimitiveArrayType(System.Type)">
            <summary>
            Determines whether a given type is a primitive array type. Namely, arrays with primitive array types as elements are primitive arrays.
            <para />
            The following types are primitive array types: <see cref="T:System.Char"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/> and <see cref="T:System.Guid"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if the given type is a primitive array type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.GetContainedType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type contained in the given <see cref="T:System.Reflection.MemberInfo"/>. Currently only <see cref="T:System.Reflection.FieldInfo"/> and <see cref="T:System.Reflection.PropertyInfo"/> is supported.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to get the contained type of.</param>
            <returns>The type contained in the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
            <exception cref="T:System.ArgumentException">Can't get the contained type of the given <see cref="T:System.Reflection.MemberInfo"/> type.</exception>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the value contained in a given <see cref="T:System.Reflection.MemberInfo"/>. Currently only <see cref="T:System.Reflection.FieldInfo"/> and <see cref="T:System.Reflection.PropertyInfo"/> is supported.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to get the value of.</param>
            <param name="obj">The instance to get the value from.</param>
            <returns>The value contained in the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
            <exception cref="T:System.ArgumentException">Can't get the value of the given <see cref="T:System.Reflection.MemberInfo"/> type.</exception>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the value of a given MemberInfo. Currently only <see cref="T:System.Reflection.FieldInfo"/> and <see cref="T:System.Reflection.PropertyInfo"/> is supported.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to set the value of.</param>
            <param name="obj">The object to set the value on.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.ArgumentException">
            Property has no setter
            or
            Can't set the value of the given <see cref="T:System.Reflection.MemberInfo"/> type.
            </exception>
        </member>
        <member name="M:Sirenix.Serialization.FormatterUtilities.GetPrivateMemberAlias(System.Reflection.MemberInfo,System.String,System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.DictionaryKeyUtility">
            <summary>
            Provides utility methods for handling dictionary keys in the inspector.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.DictionaryKeyUtility.KeyComparer`1">
            <summary>
            A smart comparer for dictionary keys, that uses the most appropriate available comparison method for the given key types.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DictionaryKeyUtility.GetPersistentPathKeyTypes">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DictionaryKeyUtility.KeyTypeSupportsPersistentPaths(System.Type)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DictionaryKeyUtility.GetDictionaryKeyString(System.Object)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.DictionaryKeyUtility.GetDictionaryKeyValue(System.String,System.Type)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.PrefabModification">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModification.ModificationType">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModification.Path">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModification.ReferencePaths">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModification.ModifiedValue">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModification.NewLength">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModification.DictionaryKeysAdded">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModification.DictionaryKeysRemoved">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.PrefabModification.Apply(UnityEngine.Object)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.PrefabModificationType">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModificationType.Value">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModificationType.ListLength">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="F:Sirenix.Serialization.PrefabModificationType.Dictionary">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Serialization.ProperBitConverter">
            <summary>
            Corresponds to the .NET <see cref="T:System.BitConverter"/> class, but works only with buffers and so never allocates garbage.
            <para />
            This class always writes and reads bytes in a little endian format, regardless of system architecture.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.BytesToHexString(System.Byte[],System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.HexStringToBytes(System.String)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Reads two bytes from a buffer and converts them into a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Reads two bytes from a buffer and converts them into a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Reads four bytes from a buffer and converts them into an <see cref="T:System.Int32"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Reads four bytes from a buffer and converts them into an <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Reads eight bytes from a buffer and converts them into a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Reads eight bytes from a buffer and converts them into an <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Reads four bytes from a buffer and converts them into an <see cref="T:System.Single"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Reads eight bytes from a buffer and converts them into an <see cref="T:System.Double"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Reads sixteen bytes from a buffer and converts them into a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.ToGuid(System.Byte[],System.Int32)">
            <summary>
            Reads sixteen bytes from a buffer and converts them into a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="buffer">The buffer to read from.</param>
            <param name="index">The index to start reading at.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Turns a <see cref="T:System.Int16"/> value into two bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Turns an <see cref="T:System.UInt16"/> value into two bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Turns an <see cref="T:System.Int32"/> value into four bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Turns an <see cref="T:System.UInt32"/> value into four bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Turns a <see cref="T:System.Int64"/> value into eight bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Turns an <see cref="T:System.UInt64"/> value into eight bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.Single)">
            <summary>
            Turns a <see cref="T:System.Single"/> value into four bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.Double)">
            <summary>
            Turns a <see cref="T:System.Double"/> value into eight bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.Decimal)">
            <summary>
            Turns a <see cref="T:System.Decimal"/> value into sixteen bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Sirenix.Serialization.ProperBitConverter.GetBytes(System.Byte[],System.Int32,System.Guid)">
            <summary>
            Turns a <see cref="T:System.Guid"/> value into sixteen bytes and writes those bytes to a given buffer.
            </summary>
            <param name="buffer">The buffer to write to.</param>
            <param name="index">The index to start writing at.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:Sirenix.Serialization.SerializationUtility">
            <summary>
            Provides an array of utility wrapper methods for easy serialization and deserialization of objects of any type.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.CreateWriter(System.IO.Stream,Sirenix.Serialization.SerializationContext,Sirenix.Serialization.DataFormat)">
            <summary>
            Creates an <see cref="T:Sirenix.Serialization.IDataWriter" /> for a given format.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="context">The serialization context to use.</param>
            <param name="format">The format to write.</param>
            <returns>
            An <see cref="T:Sirenix.Serialization.IDataWriter" /> for a given format.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.CreateReader(System.IO.Stream,Sirenix.Serialization.DeserializationContext,Sirenix.Serialization.DataFormat)">
            <summary>
            Creates an <see cref="T:Sirenix.Serialization.IDataReader" /> for a given format.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="context">The deserialization context to use.</param>
            <param name="format">The format to read.</param>
            <returns>
            An <see cref="T:Sirenix.Serialization.IDataReader" /> for a given format.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValueWeak(System.Object,Sirenix.Serialization.IDataWriter)">
            <summary>
            Serializes the given value using the given writer.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValueWeak(System.Object,Sirenix.Serialization.IDataWriter,System.Collections.Generic.List{UnityEngine.Object}@)">
            <summary>
            Serializes the given value, using the given writer.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
            <param name="unityObjects">A list of the Unity objects which were referenced during serialization.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValue``1(``0,Sirenix.Serialization.IDataWriter)">
            <summary>
            Serializes the given value using the given writer.
            </summary>
            <typeparam name="T">The type of the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValue``1(``0,Sirenix.Serialization.IDataWriter,System.Collections.Generic.List{UnityEngine.Object}@)">
            <summary>
            Serializes the given value, using the given writer.
            </summary>
            <typeparam name="T">The type of the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="writer">The writer to use.</param>
            <param name="unityObjects">A list of the Unity objects which were referenced during serialization.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValueWeak(System.Object,System.IO.Stream,Sirenix.Serialization.DataFormat,Sirenix.Serialization.SerializationContext)">
            <summary>
            Serializes the given value to a given stream in the specified format.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
            <param name="format">The format to serialize in.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValueWeak(System.Object,System.IO.Stream,Sirenix.Serialization.DataFormat,System.Collections.Generic.List{UnityEngine.Object}@,Sirenix.Serialization.SerializationContext)">
            <summary>
            Serializes the given value to a given stream in the specified format.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
            <param name="format">The format to serialize in.</param>
            <param name="unityObjects">A list of the Unity objects which were referenced during serialization.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValue``1(``0,System.IO.Stream,Sirenix.Serialization.DataFormat,Sirenix.Serialization.SerializationContext)">
            <summary>
            Serializes the given value to a given stream in the specified format.
            </summary>
            <typeparam name="T">The type of the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
            <param name="format">The format to serialize in.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValue``1(``0,System.IO.Stream,Sirenix.Serialization.DataFormat,System.Collections.Generic.List{UnityEngine.Object}@,Sirenix.Serialization.SerializationContext)">
            <summary>
            Serializes the given value to a given stream in the specified format.
            </summary>
            <typeparam name="T">The type of the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
            <param name="format">The format to serialize in.</param>
            <param name="unityObjects">A list of the Unity objects which were referenced during serialization.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValueWeak(System.Object,Sirenix.Serialization.DataFormat)">
            <summary>
            Serializes the given value using the specified format, and returns the result as a byte array.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="format">The format to use.</param>
            <returns>A byte array containing the serialized value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValueWeak(System.Object,Sirenix.Serialization.DataFormat,System.Collections.Generic.List{UnityEngine.Object}@)">
            <summary>
            Serializes the given value using the specified format, and returns the result as a byte array.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="format">The format to use.</param>
            <param name="unityObjects">A list of the Unity objects which were referenced during serialization.</param>
            <returns>A byte array containing the serialized value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValue``1(``0,Sirenix.Serialization.DataFormat,Sirenix.Serialization.SerializationContext)">
            <summary>
            Serializes the given value using the specified format, and returns the result as a byte array.
            </summary>
            <typeparam name="T">The type of the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="format">The format to use.</param>
            <param name="context">The context to use.</param>
            <returns>A byte array containing the serialized value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.SerializeValue``1(``0,Sirenix.Serialization.DataFormat,System.Collections.Generic.List{UnityEngine.Object}@,Sirenix.Serialization.SerializationContext)">
            <summary>
            Serializes the given value using the specified format and returns the result as a byte array.
            </summary>
            <typeparam name="T">The type of the value to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="format">The format to use.</param>
            <param name="unityObjects">A list of the Unity objects which were referenced during serialization.</param>
            <param name="context">The context to use.</param>
            <returns>A byte array containing the serialized value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValueWeak(Sirenix.Serialization.IDataReader)">
            <summary>
            Deserializes a value from the given reader. This might fail with primitive values, as they don't come with metadata.
            </summary>
            <param name="reader">The reader to use.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValueWeak(Sirenix.Serialization.IDataReader,System.Collections.Generic.List{UnityEngine.Object})">
            <summary>
            Deserializes a value from the given reader, using the given list of Unity objects for external index reference resolution. This might fail with primitive values, as they don't come with type metadata.
            </summary>
            <param name="reader">The reader to use.</param>
            <param name="referencedUnityObjects">The list of Unity objects to use for external index reference resolution.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValue``1(Sirenix.Serialization.IDataReader)">
            <summary>
            Deserializes a value from the given reader.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="reader">The reader to use.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValue``1(Sirenix.Serialization.IDataReader,System.Collections.Generic.List{UnityEngine.Object})">
            <summary>
            Deserializes a value of a given type from the given reader, using the given list of Unity objects for external index reference resolution.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="reader">The reader to use.</param>
            <param name="referencedUnityObjects">The list of Unity objects to use for external index reference resolution.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValueWeak(System.IO.Stream,Sirenix.Serialization.DataFormat,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Deserializes a value from the given stream in the given format. This might fail with primitive values, as they don't come with type metadata.
            </summary>
            <param name="stream">The reader to use.</param>
            <param name="format">The format to read.</param>
            <param name="context">The context.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValueWeak(System.IO.Stream,Sirenix.Serialization.DataFormat,System.Collections.Generic.List{UnityEngine.Object},Sirenix.Serialization.DeserializationContext)">
            <summary>
            Deserializes a value from the given stream in the given format, using the given list of Unity objects for external index reference resolution. This might fail with primitive values, as they don't come with type metadata.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="format">The format to read.</param>
            <param name="referencedUnityObjects">The list of Unity objects to use for external index reference resolution.</param>
            <param name="context">The context.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValue``1(System.IO.Stream,Sirenix.Serialization.DataFormat,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Deserializes a value of a given type from the given stream in the given format.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="stream">The stream to read from.</param>
            <param name="format">The format to read.</param>
            <param name="context">The context.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValue``1(System.IO.Stream,Sirenix.Serialization.DataFormat,System.Collections.Generic.List{UnityEngine.Object},Sirenix.Serialization.DeserializationContext)">
            <summary>
            Deserializes a value of a given type from the given stream in the given format, using the given list of Unity objects for external index reference resolution.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="stream">The stream to read from.</param>
            <param name="format">The format to read.</param>
            <param name="referencedUnityObjects">The list of Unity objects to use for external index reference resolution.</param>
            <param name="context">The context.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValueWeak(System.Byte[],Sirenix.Serialization.DataFormat)">
            <summary>
            Deserializes a value from the given byte array in the given format. This might fail with primitive values, as they don't come with type metadata.
            </summary>
            <param name="bytes">The bytes to deserialize from.</param>
            <param name="format">The format to read.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValueWeak(System.Byte[],Sirenix.Serialization.DataFormat,System.Collections.Generic.List{UnityEngine.Object})">
            <summary>
            Deserializes a value from the given byte array in the given format, using the given list of Unity objects for external index reference resolution. This might fail with primitive values, as they don't come with type metadata.
            </summary>
            <param name="bytes">The bytes to deserialize from.</param>
            <param name="format">The format to read.</param>
            <param name="referencedUnityObjects">The list of Unity objects to use for external index reference resolution.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValue``1(System.Byte[],Sirenix.Serialization.DataFormat,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Deserializes a value of a given type from the given byte array in the given format.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="bytes">The bytes to deserialize from.</param>
            <param name="format">The format to read.</param>
            <param name="context">The context to use.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.DeserializeValue``1(System.Byte[],Sirenix.Serialization.DataFormat,System.Collections.Generic.List{UnityEngine.Object},Sirenix.Serialization.DeserializationContext)">
            <summary>
            Deserializes a value of a given type from the given byte array in the given format, using the given list of Unity objects for external index reference resolution.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="bytes">The bytes to deserialize from.</param>
            <param name="format">The format to read.</param>
            <param name="referencedUnityObjects">The list of Unity objects to use for external index reference resolution.</param>
            <param name="context">The context to use.</param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Sirenix.Serialization.SerializationUtility.CreateCopy(System.Object)">
            <summary>
            Creates a deep copy of a non-unity object object.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:Sirenix.Serialization.UnitySerializationUtility">
            <summary>
            Provides an array of utility wrapper methods for easy serialization and deserialization of Unity objects of any type.
            <para />
            Note that setting the IndexReferenceResolver on contexts passed into methods on this class will have no effect, as it will always
            be set to a UnityReferenceResolver.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.GetRegisteredPrefabModifications(UnityEngine.Object)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.OdinWillSerialize(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Checks whether Odin will serialize a given member.
            </summary>
            <param name="member">The member to check.</param>
            <param name="serializeUnityFields">Whether to allow serialization of members that will also be serialized by Unity.</param>
            <returns>True if Odin will serialize the member, otherwise false.</returns>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.GuessIfUnityWillSerialize(System.Reflection.MemberInfo)">
            <summary>
            Guesses whether or not Unity will serialize a given member. This is not completely accurate.
            </summary>
            <param name="member">The member to check.</param>
            <returns>True if it is guessed that Unity will serialize the member, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter <paramref name="member"/> is null.</exception>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.GuessIfUnityWillSerialize(System.Type)">
            <summary>
            Guesses whether or not Unity will serialize a given type. This is not completely accurate.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if it is guessed that Unity will serialize the type, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.SerializeUnityObject(UnityEngine.Object,Sirenix.Serialization.SerializationData@,System.Boolean,Sirenix.Serialization.SerializationContext)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.SerializeUnityObject(UnityEngine.Object,System.String@,System.Collections.Generic.List{UnityEngine.Object}@,Sirenix.Serialization.DataFormat,System.Boolean,Sirenix.Serialization.SerializationContext)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.SerializeUnityObject(UnityEngine.Object,System.Byte[]@,System.Collections.Generic.List{UnityEngine.Object}@,Sirenix.Serialization.DataFormat,System.Boolean,Sirenix.Serialization.SerializationContext)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.SerializeUnityObject(UnityEngine.Object,Sirenix.Serialization.IDataWriter,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.DeserializeUnityObject(UnityEngine.Object,Sirenix.Serialization.SerializationData@,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.DeserializeUnityObject(UnityEngine.Object,System.String@,System.Collections.Generic.List{UnityEngine.Object}@,Sirenix.Serialization.DataFormat,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.DeserializeUnityObject(UnityEngine.Object,System.Byte[]@,System.Collections.Generic.List{UnityEngine.Object}@,Sirenix.Serialization.DataFormat,Sirenix.Serialization.DeserializationContext)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.DeserializeUnityObject(UnityEngine.Object,Sirenix.Serialization.IDataReader)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.SerializePrefabModifications(System.Collections.Generic.List{Sirenix.Serialization.PrefabModification},System.Collections.Generic.List{UnityEngine.Object}@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.DeserializePrefabModifications(System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnityEngine.Object})">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.RegisterPrefabModificationsChange(UnityEngine.Object,System.Collections.Generic.List{Sirenix.Serialization.PrefabModification})">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Serialization.UnitySerializationUtility.CreateDefaultUnityInitializedObject(System.Type)">
            <summary>
            Creates an object with default values initialized in the style of Unity; strings will be "", classes will be instantiated recursively with default values, and so on.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SerializedBehaviour">
            <summary>
            A Unity Behaviour which is serialized by the Sirenix serialization system.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedBehaviour.OnAfterDeserialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedBehaviour.OnBeforeSerialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SerializedComponent">
            <summary>
            A Unity Component which is serialized by the Sirenix serialization system.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedComponent.OnAfterDeserialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedComponent.OnBeforeSerialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SerializedMonoBehaviour">
            <summary>
            A Unity MonoBehaviour which is serialized by the Sirenix serialization system.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedMonoBehaviour.OnAfterDeserialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedMonoBehaviour.OnBeforeSerialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SerializedNetworkBehaviour">
            <summary>
            A Unity NetworkBehaviour which is serialized by the Sirenix serialization system.
            Please note that Odin's custom serialization only works for non-synced variables - [SyncVar] and SyncLists still have the same limitations.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedNetworkBehaviour.OnAfterDeserialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedNetworkBehaviour.OnBeforeSerialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SerializedScriptableObject">
            <summary>
            A Unity ScriptableObject which is serialized by the Sirenix serialization system.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedScriptableObject.OnAfterDeserialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedScriptableObject.OnBeforeSerialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SerializedStateMachineBehaviour">
            <summary>
            A Unity StateMachineBehaviour which is serialized by the Sirenix serialization system.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedStateMachineBehaviour.OnAfterDeserialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedStateMachineBehaviour.OnBeforeSerialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.OdinInspector.SerializedUnityObject">
            <summary>
            A Unity ScriptableObject which is serialized by the Sirenix serialization system.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedUnityObject.OnAfterDeserialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.OdinInspector.SerializedUnityObject.OnBeforeSerialize">
            <summary>
            Not yet documented.
            </summary>
        </member>
    </members>
</doc>
